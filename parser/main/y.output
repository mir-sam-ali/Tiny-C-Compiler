Terminals which are not used

   STRING_LITERAL
   AMPERSAND
   CONST
   VOID
   CASE
   DEFAULT
   DO
   SWITCH
   NEGATION
   SHIFTLEFT
   SHIFTRIGHT
   BITXOR
   BITOR
   QUESTION
   SHIFTLEQ
   SHIFTREQ
   BITANDEQ
   BITXOREQ
   BITOREQ
   HASH
   PRINTF
   SCANF
   GETS
   PUTS
   SIZEOF
   LOOP
   SUM
   MAX
   MIN
   FULL_STOP
   OPEN_SQUARE
   CLOSE_SQUARE
   COLON


Rules never reduced

   85 arithmetic_expr: array_access


State 61 conflicts: 16 reduce/reduce
State 87 conflicts: 16 reduce/reduce
State 112 conflicts: 16 reduce/reduce
State 123 conflicts: 2 reduce/reduce
State 124 conflicts: 1 shift/reduce
State 125 conflicts: 2 reduce/reduce
State 126 conflicts: 15 reduce/reduce


Grammar

    0 $accept: statements $end

    1 statements: statements stmt
    2           | /* empty */

    3 stmt: single_stmt
    4     | compound_stmt

    5 @1: /* empty */

    6 compound_stmt: '{' @1 statements '}'

    7 data_type: sign_specifier type_specifier
    8          | type_specifier

    9 sign_specifier: SIGNED
   10               | UNSIGNED

   11 type_specifier: INT
   12               | SHORT
   13               | LONG
   14               | LONG_LONG
   15               | CHAR
   16               | BOOLEAN

   17 single_stmt: if_block
   18            | for_block
   19            | while_block
   20            | declaration
   21            | RETURN ';'
   22            | CONTINUE ';'
   23            | BREAK ';'
   24            | RETURN sub_expr ';'

   25 @2: /* empty */

   26 @3: /* empty */

   27 for_block: FOR '(' @2 for_declaration expression_stmt expression ')' @3 stmt

   28 for_declaration: declaration
   29                | expression_stmt

   30 if_block: IF '(' expression ')' stmt
   31         | IF '(' expression ')' stmt ELSE stmt

   32 while_block: WHILE '(' expression ')' stmt

   33 declaration: data_type declaration_list ';'
   34            | declaration_list ';'
   35            | unary_expr ';'

   36 declaration_list: declaration_list COMMA sub_decl
   37                 | sub_decl

   38 sub_decl: assignment_expr
   39         | identifier
   40         | array_access

   41 expression_stmt: data_type expression ';'
   42                | expression ';'
   43                | ';'

   44 expression: expression COMMA sub_expr
   45           | sub_expr

   46 sub_expr: sub_expr GREATERTHAN sub_expr
   47         | sub_expr LESSTHAN sub_expr
   48         | sub_expr EQ sub_expr
   49         | sub_expr NEQ sub_expr
   50         | sub_expr GREATERTHANEQUAL sub_expr
   51         | sub_expr LESSTHANEQUAL sub_expr
   52         | sub_expr AND sub_expr
   53         | sub_expr OR sub_expr
   54         | EXCLAIMATION sub_expr
   55         | arithmetic_expr
   56         | assignment_expr
   57         | unary_expr

   58 assignment_expr: lhs assign arithmetic_expr
   59                | lhs assign array_access
   60                | lhs assign unary_expr
   61                | unary_expr assign unary_expr

   62 unary_expr: identifier INCREMENT
   63           | identifier DECREMENT
   64           | DECREMENT identifier
   65           | INCREMENT identifier

   66 lhs: identifier
   67    | array_access

   68 identifier: IDENTIFIER

   69 assign: ASSIGN
   70       | PLUSEQ
   71       | MINUSEQ
   72       | MULEQ
   73       | DIVEQ
   74       | MODEQ

   75 arithmetic_expr: arithmetic_expr ADDITION arithmetic_expr
   76                | arithmetic_expr MINUS arithmetic_expr
   77                | arithmetic_expr STAR arithmetic_expr
   78                | arithmetic_expr DIVISION arithmetic_expr
   79                | arithmetic_expr MODULO arithmetic_expr
   80                | '(' arithmetic_expr ')'
   81                | MINUS arithmetic_expr
   82                | identifier
   83                | array_access
   84                | constant
   85                | array_access

   86 constant: INTEGER_LITERAL
   87         | CHAR_LITERAL
   88         | TRUE
   89         | FALSE

   90 @4: /* empty */

   91 array_access: IDENTIFIER @4 arr

   92 arr: '[' array_index ']' arr
   93    | '[' array_index ']'

   94 array_index: INTEGER_LITERAL


Terminals, with rules where they appear

$end (0) 0
'(' (40) 27 30 31 32 80
')' (41) 27 30 31 32 80
';' (59) 21 22 23 24 33 34 35 41 42 43
'[' (91) 92 93
']' (93) 92 93
'{' (123) 6
'}' (125) 6
error (256)
IDENTIFIER (258) 68 91
INTEGER_LITERAL (259) 86 94
STRING_LITERAL (260)
CHAR_LITERAL (261) 87
AND (262) 52
OR (263) 53
LESSTHANEQUAL (264) 51
GREATERTHANEQUAL (265) 50
EQ (266) 48
NEQ (267) 49
AMPERSAND (268)
MULEQ (269) 72
DIVEQ (270) 73
MODEQ (271) 74
PLUSEQ (272) 70
MINUSEQ (273) 71
INCREMENT (274) 62 65
DECREMENT (275) 63 64
SHORT (276) 12
INT (277) 11
LONG (278) 13
LONG_LONG (279) 14
SIGNED (280) 9
UNSIGNED (281) 10
CONST (282)
CHAR (283) 15
BOOLEAN (284) 16
VOID (285)
IF (286) 30 31
FOR (287) 27
WHILE (288) 32
CONTINUE (289) 22
BREAK (290) 23
RETURN (291) 21 24
CASE (292)
DEFAULT (293)
DO (294)
ELSE (295) 31
SWITCH (296)
STAR (297) 77
ADDITION (298) 75
MINUS (299) 76 81
NEGATION (300)
EXCLAIMATION (301) 54
DIVISION (302) 78
MODULO (303) 79
SHIFTLEFT (304)
SHIFTRIGHT (305)
LESSTHAN (306) 47
GREATERTHAN (307) 46
BITXOR (308)
BITOR (309)
QUESTION (310)
ASSIGN (311) 69
SHIFTLEQ (312)
SHIFTREQ (313)
BITANDEQ (314)
BITXOREQ (315)
BITOREQ (316)
HASH (317)
TRUE (318) 88
FALSE (319) 89
PRINTF (320)
SCANF (321)
GETS (322)
PUTS (323)
SIZEOF (324)
LOOP (325)
SUM (326)
MAX (327)
MIN (328)
COMMA (329) 36 44
FULL_STOP (330)
OPEN_SQUARE (331)
CLOSE_SQUARE (332)
COLON (333)
UMINUS (334)
LOWER_THAN_ELSE (335)


Nonterminals, with rules where they appear

$accept (88)
    on left: 0
statements (89)
    on left: 1 2, on right: 0 1 6
stmt (90)
    on left: 3 4, on right: 1 27 30 31 32
compound_stmt (91)
    on left: 6, on right: 4
@1 (92)
    on left: 5, on right: 6
data_type (93)
    on left: 7 8, on right: 33 41
sign_specifier (94)
    on left: 9 10, on right: 7
type_specifier (95)
    on left: 11 12 13 14 15 16, on right: 7 8
single_stmt (96)
    on left: 17 18 19 20 21 22 23 24, on right: 3
for_block (97)
    on left: 27, on right: 18
@2 (98)
    on left: 25, on right: 27
@3 (99)
    on left: 26, on right: 27
for_declaration (100)
    on left: 28 29, on right: 27
if_block (101)
    on left: 30 31, on right: 17
while_block (102)
    on left: 32, on right: 19
declaration (103)
    on left: 33 34 35, on right: 20 28
declaration_list (104)
    on left: 36 37, on right: 33 34 36
sub_decl (105)
    on left: 38 39 40, on right: 36 37
expression_stmt (106)
    on left: 41 42 43, on right: 27 29
expression (107)
    on left: 44 45, on right: 27 30 31 32 41 42 44
sub_expr (108)
    on left: 46 47 48 49 50 51 52 53 54 55 56 57, on right: 24 44 45
    46 47 48 49 50 51 52 53 54
assignment_expr (109)
    on left: 58 59 60 61, on right: 38 56
unary_expr (110)
    on left: 62 63 64 65, on right: 35 57 60 61
lhs (111)
    on left: 66 67, on right: 58 59 60
identifier (112)
    on left: 68, on right: 39 62 63 64 65 66 82
assign (113)
    on left: 69 70 71 72 73 74, on right: 58 59 60 61
arithmetic_expr (114)
    on left: 75 76 77 78 79 80 81 82 83 84 85, on right: 55 58 75 76
    77 78 79 80 81
constant (115)
    on left: 86 87 88 89, on right: 84
array_access (116)
    on left: 91, on right: 40 59 67 83 85
@4 (117)
    on left: 90, on right: 91
arr (118)
    on left: 92 93, on right: 91 92
array_index (119)
    on left: 94, on right: 92 93


state 0

    0 $accept: . statements $end

    $default  reduce using rule 2 (statements)

    statements  go to state 1


state 1

    0 $accept: statements . $end
    1 statements: statements . stmt

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    INCREMENT   shift, and go to state 4
    DECREMENT   shift, and go to state 5
    SHORT       shift, and go to state 6
    INT         shift, and go to state 7
    LONG        shift, and go to state 8
    LONG_LONG   shift, and go to state 9
    SIGNED      shift, and go to state 10
    UNSIGNED    shift, and go to state 11
    CHAR        shift, and go to state 12
    BOOLEAN     shift, and go to state 13
    IF          shift, and go to state 14
    FOR         shift, and go to state 15
    WHILE       shift, and go to state 16
    CONTINUE    shift, and go to state 17
    BREAK       shift, and go to state 18
    RETURN      shift, and go to state 19
    '{'         shift, and go to state 20

    stmt              go to state 21
    compound_stmt     go to state 22
    data_type         go to state 23
    sign_specifier    go to state 24
    type_specifier    go to state 25
    single_stmt       go to state 26
    for_block         go to state 27
    if_block          go to state 28
    while_block       go to state 29
    declaration       go to state 30
    declaration_list  go to state 31
    sub_decl          go to state 32
    assignment_expr   go to state 33
    unary_expr        go to state 34
    lhs               go to state 35
    identifier        go to state 36
    array_access      go to state 37


state 2

    0 $accept: statements $end .

    $default  accept


state 3

   68 identifier: IDENTIFIER .
   91 array_access: IDENTIFIER . @4 arr

    '['       reduce using rule 90 (@4)
    $default  reduce using rule 68 (identifier)

    @4  go to state 38


state 4

   65 unary_expr: INCREMENT . identifier

    IDENTIFIER  shift, and go to state 39

    identifier  go to state 40


state 5

   64 unary_expr: DECREMENT . identifier

    IDENTIFIER  shift, and go to state 39

    identifier  go to state 41


state 6

   12 type_specifier: SHORT .

    $default  reduce using rule 12 (type_specifier)


state 7

   11 type_specifier: INT .

    $default  reduce using rule 11 (type_specifier)


state 8

   13 type_specifier: LONG .

    $default  reduce using rule 13 (type_specifier)


state 9

   14 type_specifier: LONG_LONG .

    $default  reduce using rule 14 (type_specifier)


state 10

    9 sign_specifier: SIGNED .

    $default  reduce using rule 9 (sign_specifier)


state 11

   10 sign_specifier: UNSIGNED .

    $default  reduce using rule 10 (sign_specifier)


state 12

   15 type_specifier: CHAR .

    $default  reduce using rule 15 (type_specifier)


state 13

   16 type_specifier: BOOLEAN .

    $default  reduce using rule 16 (type_specifier)


state 14

   30 if_block: IF . '(' expression ')' stmt
   31         | IF . '(' expression ')' stmt ELSE stmt

    '('  shift, and go to state 42


state 15

   27 for_block: FOR . '(' @2 for_declaration expression_stmt expression ')' @3 stmt

    '('  shift, and go to state 43


state 16

   32 while_block: WHILE . '(' expression ')' stmt

    '('  shift, and go to state 44


state 17

   22 single_stmt: CONTINUE . ';'

    ';'  shift, and go to state 45


state 18

   23 single_stmt: BREAK . ';'

    ';'  shift, and go to state 46


state 19

   21 single_stmt: RETURN . ';'
   24            | RETURN . sub_expr ';'

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    ';'              shift, and go to state 53
    '('              shift, and go to state 54

    sub_expr         go to state 55
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 20

    6 compound_stmt: '{' . @1 statements '}'

    $default  reduce using rule 5 (@1)

    @1  go to state 62


state 21

    1 statements: statements stmt .

    $default  reduce using rule 1 (statements)


state 22

    4 stmt: compound_stmt .

    $default  reduce using rule 4 (stmt)


state 23

   33 declaration: data_type . declaration_list ';'

    IDENTIFIER  shift, and go to state 3
    INCREMENT   shift, and go to state 4
    DECREMENT   shift, and go to state 5

    declaration_list  go to state 63
    sub_decl          go to state 32
    assignment_expr   go to state 33
    unary_expr        go to state 64
    lhs               go to state 35
    identifier        go to state 36
    array_access      go to state 37


state 24

    7 data_type: sign_specifier . type_specifier

    SHORT      shift, and go to state 6
    INT        shift, and go to state 7
    LONG       shift, and go to state 8
    LONG_LONG  shift, and go to state 9
    CHAR       shift, and go to state 12
    BOOLEAN    shift, and go to state 13

    type_specifier  go to state 65


state 25

    8 data_type: type_specifier .

    $default  reduce using rule 8 (data_type)


state 26

    3 stmt: single_stmt .

    $default  reduce using rule 3 (stmt)


state 27

   18 single_stmt: for_block .

    $default  reduce using rule 18 (single_stmt)


state 28

   17 single_stmt: if_block .

    $default  reduce using rule 17 (single_stmt)


state 29

   19 single_stmt: while_block .

    $default  reduce using rule 19 (single_stmt)


state 30

   20 single_stmt: declaration .

    $default  reduce using rule 20 (single_stmt)


state 31

   34 declaration: declaration_list . ';'
   36 declaration_list: declaration_list . COMMA sub_decl

    COMMA  shift, and go to state 66
    ';'    shift, and go to state 67


state 32

   37 declaration_list: sub_decl .

    $default  reduce using rule 37 (declaration_list)


state 33

   38 sub_decl: assignment_expr .

    $default  reduce using rule 38 (sub_decl)


state 34

   35 declaration: unary_expr . ';'
   61 assignment_expr: unary_expr . assign unary_expr

    MULEQ    shift, and go to state 68
    DIVEQ    shift, and go to state 69
    MODEQ    shift, and go to state 70
    PLUSEQ   shift, and go to state 71
    MINUSEQ  shift, and go to state 72
    ASSIGN   shift, and go to state 73
    ';'      shift, and go to state 74

    assign  go to state 75


state 35

   58 assignment_expr: lhs . assign arithmetic_expr
   59                | lhs . assign array_access
   60                | lhs . assign unary_expr

    MULEQ    shift, and go to state 68
    DIVEQ    shift, and go to state 69
    MODEQ    shift, and go to state 70
    PLUSEQ   shift, and go to state 71
    MINUSEQ  shift, and go to state 72
    ASSIGN   shift, and go to state 73

    assign  go to state 76


state 36

   39 sub_decl: identifier .
   62 unary_expr: identifier . INCREMENT
   63           | identifier . DECREMENT
   66 lhs: identifier .

    INCREMENT  shift, and go to state 77
    DECREMENT  shift, and go to state 78

    COMMA     reduce using rule 39 (sub_decl)
    ';'       reduce using rule 39 (sub_decl)
    $default  reduce using rule 66 (lhs)


state 37

   40 sub_decl: array_access .
   67 lhs: array_access .

    COMMA     reduce using rule 40 (sub_decl)
    ';'       reduce using rule 40 (sub_decl)
    $default  reduce using rule 67 (lhs)


state 38

   91 array_access: IDENTIFIER @4 . arr

    '['  shift, and go to state 79

    arr  go to state 80


state 39

   68 identifier: IDENTIFIER .

    $default  reduce using rule 68 (identifier)


state 40

   65 unary_expr: INCREMENT identifier .

    $default  reduce using rule 65 (unary_expr)


state 41

   64 unary_expr: DECREMENT identifier .

    $default  reduce using rule 64 (unary_expr)


state 42

   30 if_block: IF '(' . expression ')' stmt
   31         | IF '(' . expression ')' stmt ELSE stmt

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    expression       go to state 81
    sub_expr         go to state 82
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 43

   27 for_block: FOR '(' . @2 for_declaration expression_stmt expression ')' @3 stmt

    $default  reduce using rule 25 (@2)

    @2  go to state 83


state 44

   32 while_block: WHILE '(' . expression ')' stmt

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    expression       go to state 84
    sub_expr         go to state 82
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 45

   22 single_stmt: CONTINUE ';' .

    $default  reduce using rule 22 (single_stmt)


state 46

   23 single_stmt: BREAK ';' .

    $default  reduce using rule 23 (single_stmt)


state 47

   86 constant: INTEGER_LITERAL .

    $default  reduce using rule 86 (constant)


state 48

   87 constant: CHAR_LITERAL .

    $default  reduce using rule 87 (constant)


state 49

   81 arithmetic_expr: MINUS . arithmetic_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    MINUS            shift, and go to state 49
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    identifier       go to state 85
    arithmetic_expr  go to state 86
    constant         go to state 60
    array_access     go to state 87


state 50

   54 sub_expr: EXCLAIMATION . sub_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    sub_expr         go to state 88
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 51

   88 constant: TRUE .

    $default  reduce using rule 88 (constant)


state 52

   89 constant: FALSE .

    $default  reduce using rule 89 (constant)


state 53

   21 single_stmt: RETURN ';' .

    $default  reduce using rule 21 (single_stmt)


state 54

   80 arithmetic_expr: '(' . arithmetic_expr ')'

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    MINUS            shift, and go to state 49
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    identifier       go to state 85
    arithmetic_expr  go to state 89
    constant         go to state 60
    array_access     go to state 87


state 55

   24 single_stmt: RETURN sub_expr . ';'
   46 sub_expr: sub_expr . GREATERTHAN sub_expr
   47         | sub_expr . LESSTHAN sub_expr
   48         | sub_expr . EQ sub_expr
   49         | sub_expr . NEQ sub_expr
   50         | sub_expr . GREATERTHANEQUAL sub_expr
   51         | sub_expr . LESSTHANEQUAL sub_expr
   52         | sub_expr . AND sub_expr
   53         | sub_expr . OR sub_expr

    AND               shift, and go to state 90
    OR                shift, and go to state 91
    LESSTHANEQUAL     shift, and go to state 92
    GREATERTHANEQUAL  shift, and go to state 93
    EQ                shift, and go to state 94
    NEQ               shift, and go to state 95
    LESSTHAN          shift, and go to state 96
    GREATERTHAN       shift, and go to state 97
    ';'               shift, and go to state 98


state 56

   56 sub_expr: assignment_expr .

    $default  reduce using rule 56 (sub_expr)


state 57

   57 sub_expr: unary_expr .
   61 assignment_expr: unary_expr . assign unary_expr

    MULEQ    shift, and go to state 68
    DIVEQ    shift, and go to state 69
    MODEQ    shift, and go to state 70
    PLUSEQ   shift, and go to state 71
    MINUSEQ  shift, and go to state 72
    ASSIGN   shift, and go to state 73

    $default  reduce using rule 57 (sub_expr)

    assign  go to state 75


state 58

   62 unary_expr: identifier . INCREMENT
   63           | identifier . DECREMENT
   66 lhs: identifier .
   82 arithmetic_expr: identifier .

    INCREMENT  shift, and go to state 77
    DECREMENT  shift, and go to state 78

    MULEQ     reduce using rule 66 (lhs)
    DIVEQ     reduce using rule 66 (lhs)
    MODEQ     reduce using rule 66 (lhs)
    PLUSEQ    reduce using rule 66 (lhs)
    MINUSEQ   reduce using rule 66 (lhs)
    ASSIGN    reduce using rule 66 (lhs)
    $default  reduce using rule 82 (arithmetic_expr)


state 59

   55 sub_expr: arithmetic_expr .
   75 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   76                | arithmetic_expr . MINUS arithmetic_expr
   77                | arithmetic_expr . STAR arithmetic_expr
   78                | arithmetic_expr . DIVISION arithmetic_expr
   79                | arithmetic_expr . MODULO arithmetic_expr

    STAR      shift, and go to state 99
    ADDITION  shift, and go to state 100
    MINUS     shift, and go to state 101
    DIVISION  shift, and go to state 102
    MODULO    shift, and go to state 103

    $default  reduce using rule 55 (sub_expr)


state 60

   84 arithmetic_expr: constant .

    $default  reduce using rule 84 (arithmetic_expr)


state 61

   67 lhs: array_access .
   83 arithmetic_expr: array_access .
   85                | array_access .

    AND               reduce using rule 83 (arithmetic_expr)
    AND               [reduce using rule 85 (arithmetic_expr)]
    OR                reduce using rule 83 (arithmetic_expr)
    OR                [reduce using rule 85 (arithmetic_expr)]
    LESSTHANEQUAL     reduce using rule 83 (arithmetic_expr)
    LESSTHANEQUAL     [reduce using rule 85 (arithmetic_expr)]
    GREATERTHANEQUAL  reduce using rule 83 (arithmetic_expr)
    GREATERTHANEQUAL  [reduce using rule 85 (arithmetic_expr)]
    EQ                reduce using rule 83 (arithmetic_expr)
    EQ                [reduce using rule 85 (arithmetic_expr)]
    NEQ               reduce using rule 83 (arithmetic_expr)
    NEQ               [reduce using rule 85 (arithmetic_expr)]
    MULEQ             reduce using rule 67 (lhs)
    DIVEQ             reduce using rule 67 (lhs)
    MODEQ             reduce using rule 67 (lhs)
    PLUSEQ            reduce using rule 67 (lhs)
    MINUSEQ           reduce using rule 67 (lhs)
    STAR              reduce using rule 83 (arithmetic_expr)
    STAR              [reduce using rule 85 (arithmetic_expr)]
    ADDITION          reduce using rule 83 (arithmetic_expr)
    ADDITION          [reduce using rule 85 (arithmetic_expr)]
    MINUS             reduce using rule 83 (arithmetic_expr)
    MINUS             [reduce using rule 85 (arithmetic_expr)]
    DIVISION          reduce using rule 83 (arithmetic_expr)
    DIVISION          [reduce using rule 85 (arithmetic_expr)]
    MODULO            reduce using rule 83 (arithmetic_expr)
    MODULO            [reduce using rule 85 (arithmetic_expr)]
    LESSTHAN          reduce using rule 83 (arithmetic_expr)
    LESSTHAN          [reduce using rule 85 (arithmetic_expr)]
    GREATERTHAN       reduce using rule 83 (arithmetic_expr)
    GREATERTHAN       [reduce using rule 85 (arithmetic_expr)]
    ASSIGN            reduce using rule 67 (lhs)
    COMMA             reduce using rule 83 (arithmetic_expr)
    COMMA             [reduce using rule 85 (arithmetic_expr)]
    ';'               reduce using rule 83 (arithmetic_expr)
    ';'               [reduce using rule 85 (arithmetic_expr)]
    ')'               reduce using rule 83 (arithmetic_expr)
    ')'               [reduce using rule 85 (arithmetic_expr)]
    $default          reduce using rule 83 (arithmetic_expr)


state 62

    6 compound_stmt: '{' @1 . statements '}'

    $default  reduce using rule 2 (statements)

    statements  go to state 104


state 63

   33 declaration: data_type declaration_list . ';'
   36 declaration_list: declaration_list . COMMA sub_decl

    COMMA  shift, and go to state 66
    ';'    shift, and go to state 105


state 64

   61 assignment_expr: unary_expr . assign unary_expr

    MULEQ    shift, and go to state 68
    DIVEQ    shift, and go to state 69
    MODEQ    shift, and go to state 70
    PLUSEQ   shift, and go to state 71
    MINUSEQ  shift, and go to state 72
    ASSIGN   shift, and go to state 73

    assign  go to state 75


state 65

    7 data_type: sign_specifier type_specifier .

    $default  reduce using rule 7 (data_type)


state 66

   36 declaration_list: declaration_list COMMA . sub_decl

    IDENTIFIER  shift, and go to state 3
    INCREMENT   shift, and go to state 4
    DECREMENT   shift, and go to state 5

    sub_decl         go to state 106
    assignment_expr  go to state 33
    unary_expr       go to state 64
    lhs              go to state 35
    identifier       go to state 36
    array_access     go to state 37


state 67

   34 declaration: declaration_list ';' .

    $default  reduce using rule 34 (declaration)


state 68

   72 assign: MULEQ .

    $default  reduce using rule 72 (assign)


state 69

   73 assign: DIVEQ .

    $default  reduce using rule 73 (assign)


state 70

   74 assign: MODEQ .

    $default  reduce using rule 74 (assign)


state 71

   70 assign: PLUSEQ .

    $default  reduce using rule 70 (assign)


state 72

   71 assign: MINUSEQ .

    $default  reduce using rule 71 (assign)


state 73

   69 assign: ASSIGN .

    $default  reduce using rule 69 (assign)


state 74

   35 declaration: unary_expr ';' .

    $default  reduce using rule 35 (declaration)


state 75

   61 assignment_expr: unary_expr assign . unary_expr

    IDENTIFIER  shift, and go to state 39
    INCREMENT   shift, and go to state 4
    DECREMENT   shift, and go to state 5

    unary_expr  go to state 107
    identifier  go to state 108


state 76

   58 assignment_expr: lhs assign . arithmetic_expr
   59                | lhs assign . array_access
   60                | lhs assign . unary_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    unary_expr       go to state 109
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 60
    array_access     go to state 112


state 77

   62 unary_expr: identifier INCREMENT .

    $default  reduce using rule 62 (unary_expr)


state 78

   63 unary_expr: identifier DECREMENT .

    $default  reduce using rule 63 (unary_expr)


state 79

   92 arr: '[' . array_index ']' arr
   93    | '[' . array_index ']'

    INTEGER_LITERAL  shift, and go to state 113

    array_index  go to state 114


state 80

   91 array_access: IDENTIFIER @4 arr .

    $default  reduce using rule 91 (array_access)


state 81

   30 if_block: IF '(' expression . ')' stmt
   31         | IF '(' expression . ')' stmt ELSE stmt
   44 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 115
    ')'    shift, and go to state 116


state 82

   45 expression: sub_expr .
   46 sub_expr: sub_expr . GREATERTHAN sub_expr
   47         | sub_expr . LESSTHAN sub_expr
   48         | sub_expr . EQ sub_expr
   49         | sub_expr . NEQ sub_expr
   50         | sub_expr . GREATERTHANEQUAL sub_expr
   51         | sub_expr . LESSTHANEQUAL sub_expr
   52         | sub_expr . AND sub_expr
   53         | sub_expr . OR sub_expr

    AND               shift, and go to state 90
    OR                shift, and go to state 91
    LESSTHANEQUAL     shift, and go to state 92
    GREATERTHANEQUAL  shift, and go to state 93
    EQ                shift, and go to state 94
    NEQ               shift, and go to state 95
    LESSTHAN          shift, and go to state 96
    GREATERTHAN       shift, and go to state 97

    $default  reduce using rule 45 (expression)


state 83

   27 for_block: FOR '(' @2 . for_declaration expression_stmt expression ')' @3 stmt

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    SHORT            shift, and go to state 6
    INT              shift, and go to state 7
    LONG             shift, and go to state 8
    LONG_LONG        shift, and go to state 9
    SIGNED           shift, and go to state 10
    UNSIGNED         shift, and go to state 11
    CHAR             shift, and go to state 12
    BOOLEAN          shift, and go to state 13
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    ';'              shift, and go to state 117
    '('              shift, and go to state 54

    data_type         go to state 118
    sign_specifier    go to state 24
    type_specifier    go to state 25
    for_declaration   go to state 119
    declaration       go to state 120
    declaration_list  go to state 31
    sub_decl          go to state 32
    expression_stmt   go to state 121
    expression        go to state 122
    sub_expr          go to state 82
    assignment_expr   go to state 123
    unary_expr        go to state 124
    lhs               go to state 35
    identifier        go to state 125
    arithmetic_expr   go to state 59
    constant          go to state 60
    array_access      go to state 126


state 84

   32 while_block: WHILE '(' expression . ')' stmt
   44 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 115
    ')'    shift, and go to state 127


state 85

   82 arithmetic_expr: identifier .

    $default  reduce using rule 82 (arithmetic_expr)


state 86

   75 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   76                | arithmetic_expr . MINUS arithmetic_expr
   77                | arithmetic_expr . STAR arithmetic_expr
   78                | arithmetic_expr . DIVISION arithmetic_expr
   79                | arithmetic_expr . MODULO arithmetic_expr
   81                | MINUS arithmetic_expr .

    $default  reduce using rule 81 (arithmetic_expr)


state 87

   83 arithmetic_expr: array_access .
   85                | array_access .

    AND               reduce using rule 83 (arithmetic_expr)
    AND               [reduce using rule 85 (arithmetic_expr)]
    OR                reduce using rule 83 (arithmetic_expr)
    OR                [reduce using rule 85 (arithmetic_expr)]
    LESSTHANEQUAL     reduce using rule 83 (arithmetic_expr)
    LESSTHANEQUAL     [reduce using rule 85 (arithmetic_expr)]
    GREATERTHANEQUAL  reduce using rule 83 (arithmetic_expr)
    GREATERTHANEQUAL  [reduce using rule 85 (arithmetic_expr)]
    EQ                reduce using rule 83 (arithmetic_expr)
    EQ                [reduce using rule 85 (arithmetic_expr)]
    NEQ               reduce using rule 83 (arithmetic_expr)
    NEQ               [reduce using rule 85 (arithmetic_expr)]
    STAR              reduce using rule 83 (arithmetic_expr)
    STAR              [reduce using rule 85 (arithmetic_expr)]
    ADDITION          reduce using rule 83 (arithmetic_expr)
    ADDITION          [reduce using rule 85 (arithmetic_expr)]
    MINUS             reduce using rule 83 (arithmetic_expr)
    MINUS             [reduce using rule 85 (arithmetic_expr)]
    DIVISION          reduce using rule 83 (arithmetic_expr)
    DIVISION          [reduce using rule 85 (arithmetic_expr)]
    MODULO            reduce using rule 83 (arithmetic_expr)
    MODULO            [reduce using rule 85 (arithmetic_expr)]
    LESSTHAN          reduce using rule 83 (arithmetic_expr)
    LESSTHAN          [reduce using rule 85 (arithmetic_expr)]
    GREATERTHAN       reduce using rule 83 (arithmetic_expr)
    GREATERTHAN       [reduce using rule 85 (arithmetic_expr)]
    COMMA             reduce using rule 83 (arithmetic_expr)
    COMMA             [reduce using rule 85 (arithmetic_expr)]
    ';'               reduce using rule 83 (arithmetic_expr)
    ';'               [reduce using rule 85 (arithmetic_expr)]
    ')'               reduce using rule 83 (arithmetic_expr)
    ')'               [reduce using rule 85 (arithmetic_expr)]
    $default          reduce using rule 83 (arithmetic_expr)


state 88

   46 sub_expr: sub_expr . GREATERTHAN sub_expr
   47         | sub_expr . LESSTHAN sub_expr
   48         | sub_expr . EQ sub_expr
   49         | sub_expr . NEQ sub_expr
   50         | sub_expr . GREATERTHANEQUAL sub_expr
   51         | sub_expr . LESSTHANEQUAL sub_expr
   52         | sub_expr . AND sub_expr
   53         | sub_expr . OR sub_expr
   54         | EXCLAIMATION sub_expr .

    $default  reduce using rule 54 (sub_expr)


state 89

   75 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   76                | arithmetic_expr . MINUS arithmetic_expr
   77                | arithmetic_expr . STAR arithmetic_expr
   78                | arithmetic_expr . DIVISION arithmetic_expr
   79                | arithmetic_expr . MODULO arithmetic_expr
   80                | '(' arithmetic_expr . ')'

    STAR      shift, and go to state 99
    ADDITION  shift, and go to state 100
    MINUS     shift, and go to state 101
    DIVISION  shift, and go to state 102
    MODULO    shift, and go to state 103
    ')'       shift, and go to state 128


state 90

   52 sub_expr: sub_expr AND . sub_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    sub_expr         go to state 129
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 91

   53 sub_expr: sub_expr OR . sub_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    sub_expr         go to state 130
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 92

   51 sub_expr: sub_expr LESSTHANEQUAL . sub_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    sub_expr         go to state 131
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 93

   50 sub_expr: sub_expr GREATERTHANEQUAL . sub_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    sub_expr         go to state 132
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 94

   48 sub_expr: sub_expr EQ . sub_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    sub_expr         go to state 133
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 95

   49 sub_expr: sub_expr NEQ . sub_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    sub_expr         go to state 134
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 96

   47 sub_expr: sub_expr LESSTHAN . sub_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    sub_expr         go to state 135
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 97

   46 sub_expr: sub_expr GREATERTHAN . sub_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    sub_expr         go to state 136
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 98

   24 single_stmt: RETURN sub_expr ';' .

    $default  reduce using rule 24 (single_stmt)


state 99

   77 arithmetic_expr: arithmetic_expr STAR . arithmetic_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    MINUS            shift, and go to state 49
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    identifier       go to state 85
    arithmetic_expr  go to state 137
    constant         go to state 60
    array_access     go to state 87


state 100

   75 arithmetic_expr: arithmetic_expr ADDITION . arithmetic_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    MINUS            shift, and go to state 49
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    identifier       go to state 85
    arithmetic_expr  go to state 138
    constant         go to state 60
    array_access     go to state 87


state 101

   76 arithmetic_expr: arithmetic_expr MINUS . arithmetic_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    MINUS            shift, and go to state 49
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    identifier       go to state 85
    arithmetic_expr  go to state 139
    constant         go to state 60
    array_access     go to state 87


state 102

   78 arithmetic_expr: arithmetic_expr DIVISION . arithmetic_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    MINUS            shift, and go to state 49
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    identifier       go to state 85
    arithmetic_expr  go to state 140
    constant         go to state 60
    array_access     go to state 87


state 103

   79 arithmetic_expr: arithmetic_expr MODULO . arithmetic_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    MINUS            shift, and go to state 49
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    identifier       go to state 85
    arithmetic_expr  go to state 141
    constant         go to state 60
    array_access     go to state 87


state 104

    1 statements: statements . stmt
    6 compound_stmt: '{' @1 statements . '}'

    IDENTIFIER  shift, and go to state 3
    INCREMENT   shift, and go to state 4
    DECREMENT   shift, and go to state 5
    SHORT       shift, and go to state 6
    INT         shift, and go to state 7
    LONG        shift, and go to state 8
    LONG_LONG   shift, and go to state 9
    SIGNED      shift, and go to state 10
    UNSIGNED    shift, and go to state 11
    CHAR        shift, and go to state 12
    BOOLEAN     shift, and go to state 13
    IF          shift, and go to state 14
    FOR         shift, and go to state 15
    WHILE       shift, and go to state 16
    CONTINUE    shift, and go to state 17
    BREAK       shift, and go to state 18
    RETURN      shift, and go to state 19
    '{'         shift, and go to state 20
    '}'         shift, and go to state 142

    stmt              go to state 21
    compound_stmt     go to state 22
    data_type         go to state 23
    sign_specifier    go to state 24
    type_specifier    go to state 25
    single_stmt       go to state 26
    for_block         go to state 27
    if_block          go to state 28
    while_block       go to state 29
    declaration       go to state 30
    declaration_list  go to state 31
    sub_decl          go to state 32
    assignment_expr   go to state 33
    unary_expr        go to state 34
    lhs               go to state 35
    identifier        go to state 36
    array_access      go to state 37


state 105

   33 declaration: data_type declaration_list ';' .

    $default  reduce using rule 33 (declaration)


state 106

   36 declaration_list: declaration_list COMMA sub_decl .

    $default  reduce using rule 36 (declaration_list)


state 107

   61 assignment_expr: unary_expr assign unary_expr .

    $default  reduce using rule 61 (assignment_expr)


state 108

   62 unary_expr: identifier . INCREMENT
   63           | identifier . DECREMENT

    INCREMENT  shift, and go to state 77
    DECREMENT  shift, and go to state 78


state 109

   60 assignment_expr: lhs assign unary_expr .

    $default  reduce using rule 60 (assignment_expr)


state 110

   62 unary_expr: identifier . INCREMENT
   63           | identifier . DECREMENT
   82 arithmetic_expr: identifier .

    INCREMENT  shift, and go to state 77
    DECREMENT  shift, and go to state 78

    $default  reduce using rule 82 (arithmetic_expr)


state 111

   58 assignment_expr: lhs assign arithmetic_expr .
   75 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   76                | arithmetic_expr . MINUS arithmetic_expr
   77                | arithmetic_expr . STAR arithmetic_expr
   78                | arithmetic_expr . DIVISION arithmetic_expr
   79                | arithmetic_expr . MODULO arithmetic_expr

    STAR      shift, and go to state 99
    ADDITION  shift, and go to state 100
    MINUS     shift, and go to state 101
    DIVISION  shift, and go to state 102
    MODULO    shift, and go to state 103

    $default  reduce using rule 58 (assignment_expr)


state 112

   59 assignment_expr: lhs assign array_access .
   83 arithmetic_expr: array_access .
   85                | array_access .

    AND               reduce using rule 59 (assignment_expr)
    AND               [reduce using rule 83 (arithmetic_expr)]
    AND               [reduce using rule 85 (arithmetic_expr)]
    OR                reduce using rule 59 (assignment_expr)
    OR                [reduce using rule 83 (arithmetic_expr)]
    OR                [reduce using rule 85 (arithmetic_expr)]
    LESSTHANEQUAL     reduce using rule 59 (assignment_expr)
    LESSTHANEQUAL     [reduce using rule 83 (arithmetic_expr)]
    LESSTHANEQUAL     [reduce using rule 85 (arithmetic_expr)]
    GREATERTHANEQUAL  reduce using rule 59 (assignment_expr)
    GREATERTHANEQUAL  [reduce using rule 83 (arithmetic_expr)]
    GREATERTHANEQUAL  [reduce using rule 85 (arithmetic_expr)]
    EQ                reduce using rule 59 (assignment_expr)
    EQ                [reduce using rule 83 (arithmetic_expr)]
    EQ                [reduce using rule 85 (arithmetic_expr)]
    NEQ               reduce using rule 59 (assignment_expr)
    NEQ               [reduce using rule 83 (arithmetic_expr)]
    NEQ               [reduce using rule 85 (arithmetic_expr)]
    STAR              reduce using rule 83 (arithmetic_expr)
    STAR              [reduce using rule 85 (arithmetic_expr)]
    ADDITION          reduce using rule 83 (arithmetic_expr)
    ADDITION          [reduce using rule 85 (arithmetic_expr)]
    MINUS             reduce using rule 83 (arithmetic_expr)
    MINUS             [reduce using rule 85 (arithmetic_expr)]
    DIVISION          reduce using rule 83 (arithmetic_expr)
    DIVISION          [reduce using rule 85 (arithmetic_expr)]
    MODULO            reduce using rule 83 (arithmetic_expr)
    MODULO            [reduce using rule 85 (arithmetic_expr)]
    LESSTHAN          reduce using rule 59 (assignment_expr)
    LESSTHAN          [reduce using rule 83 (arithmetic_expr)]
    LESSTHAN          [reduce using rule 85 (arithmetic_expr)]
    GREATERTHAN       reduce using rule 59 (assignment_expr)
    GREATERTHAN       [reduce using rule 83 (arithmetic_expr)]
    GREATERTHAN       [reduce using rule 85 (arithmetic_expr)]
    COMMA             reduce using rule 59 (assignment_expr)
    COMMA             [reduce using rule 83 (arithmetic_expr)]
    COMMA             [reduce using rule 85 (arithmetic_expr)]
    ';'               reduce using rule 59 (assignment_expr)
    ';'               [reduce using rule 83 (arithmetic_expr)]
    ';'               [reduce using rule 85 (arithmetic_expr)]
    ')'               reduce using rule 59 (assignment_expr)
    ')'               [reduce using rule 83 (arithmetic_expr)]
    ')'               [reduce using rule 85 (arithmetic_expr)]
    $default          reduce using rule 59 (assignment_expr)


state 113

   94 array_index: INTEGER_LITERAL .

    $default  reduce using rule 94 (array_index)


state 114

   92 arr: '[' array_index . ']' arr
   93    | '[' array_index . ']'

    ']'  shift, and go to state 143


state 115

   44 expression: expression COMMA . sub_expr

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    sub_expr         go to state 144
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 116

   30 if_block: IF '(' expression ')' . stmt
   31         | IF '(' expression ')' . stmt ELSE stmt

    IDENTIFIER  shift, and go to state 3
    INCREMENT   shift, and go to state 4
    DECREMENT   shift, and go to state 5
    SHORT       shift, and go to state 6
    INT         shift, and go to state 7
    LONG        shift, and go to state 8
    LONG_LONG   shift, and go to state 9
    SIGNED      shift, and go to state 10
    UNSIGNED    shift, and go to state 11
    CHAR        shift, and go to state 12
    BOOLEAN     shift, and go to state 13
    IF          shift, and go to state 14
    FOR         shift, and go to state 15
    WHILE       shift, and go to state 16
    CONTINUE    shift, and go to state 17
    BREAK       shift, and go to state 18
    RETURN      shift, and go to state 19
    '{'         shift, and go to state 20

    stmt              go to state 145
    compound_stmt     go to state 22
    data_type         go to state 23
    sign_specifier    go to state 24
    type_specifier    go to state 25
    single_stmt       go to state 26
    for_block         go to state 27
    if_block          go to state 28
    while_block       go to state 29
    declaration       go to state 30
    declaration_list  go to state 31
    sub_decl          go to state 32
    assignment_expr   go to state 33
    unary_expr        go to state 34
    lhs               go to state 35
    identifier        go to state 36
    array_access      go to state 37


state 117

   43 expression_stmt: ';' .

    $default  reduce using rule 43 (expression_stmt)


state 118

   33 declaration: data_type . declaration_list ';'
   41 expression_stmt: data_type . expression ';'

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    declaration_list  go to state 63
    sub_decl          go to state 32
    expression        go to state 146
    sub_expr          go to state 82
    assignment_expr   go to state 123
    unary_expr        go to state 57
    lhs               go to state 35
    identifier        go to state 125
    arithmetic_expr   go to state 59
    constant          go to state 60
    array_access      go to state 126


state 119

   27 for_block: FOR '(' @2 for_declaration . expression_stmt expression ')' @3 stmt

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    SHORT            shift, and go to state 6
    INT              shift, and go to state 7
    LONG             shift, and go to state 8
    LONG_LONG        shift, and go to state 9
    SIGNED           shift, and go to state 10
    UNSIGNED         shift, and go to state 11
    CHAR             shift, and go to state 12
    BOOLEAN          shift, and go to state 13
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    ';'              shift, and go to state 117
    '('              shift, and go to state 54

    data_type        go to state 147
    sign_specifier   go to state 24
    type_specifier   go to state 25
    expression_stmt  go to state 148
    expression       go to state 122
    sub_expr         go to state 82
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 120

   28 for_declaration: declaration .

    $default  reduce using rule 28 (for_declaration)


state 121

   29 for_declaration: expression_stmt .

    $default  reduce using rule 29 (for_declaration)


state 122

   42 expression_stmt: expression . ';'
   44 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 115
    ';'    shift, and go to state 149


state 123

   38 sub_decl: assignment_expr .
   56 sub_expr: assignment_expr .

    COMMA     reduce using rule 38 (sub_decl)
    COMMA     [reduce using rule 56 (sub_expr)]
    ';'       reduce using rule 38 (sub_decl)
    ';'       [reduce using rule 56 (sub_expr)]
    $default  reduce using rule 56 (sub_expr)


state 124

   35 declaration: unary_expr . ';'
   57 sub_expr: unary_expr .
   61 assignment_expr: unary_expr . assign unary_expr

    MULEQ    shift, and go to state 68
    DIVEQ    shift, and go to state 69
    MODEQ    shift, and go to state 70
    PLUSEQ   shift, and go to state 71
    MINUSEQ  shift, and go to state 72
    ASSIGN   shift, and go to state 73
    ';'      shift, and go to state 74

    ';'       [reduce using rule 57 (sub_expr)]
    $default  reduce using rule 57 (sub_expr)

    assign  go to state 75


state 125

   39 sub_decl: identifier .
   62 unary_expr: identifier . INCREMENT
   63           | identifier . DECREMENT
   66 lhs: identifier .
   82 arithmetic_expr: identifier .

    INCREMENT  shift, and go to state 77
    DECREMENT  shift, and go to state 78

    MULEQ     reduce using rule 66 (lhs)
    DIVEQ     reduce using rule 66 (lhs)
    MODEQ     reduce using rule 66 (lhs)
    PLUSEQ    reduce using rule 66 (lhs)
    MINUSEQ   reduce using rule 66 (lhs)
    ASSIGN    reduce using rule 66 (lhs)
    COMMA     reduce using rule 39 (sub_decl)
    COMMA     [reduce using rule 82 (arithmetic_expr)]
    ';'       reduce using rule 39 (sub_decl)
    ';'       [reduce using rule 82 (arithmetic_expr)]
    $default  reduce using rule 82 (arithmetic_expr)


state 126

   40 sub_decl: array_access .
   67 lhs: array_access .
   83 arithmetic_expr: array_access .
   85                | array_access .

    AND               reduce using rule 83 (arithmetic_expr)
    AND               [reduce using rule 85 (arithmetic_expr)]
    OR                reduce using rule 83 (arithmetic_expr)
    OR                [reduce using rule 85 (arithmetic_expr)]
    LESSTHANEQUAL     reduce using rule 83 (arithmetic_expr)
    LESSTHANEQUAL     [reduce using rule 85 (arithmetic_expr)]
    GREATERTHANEQUAL  reduce using rule 83 (arithmetic_expr)
    GREATERTHANEQUAL  [reduce using rule 85 (arithmetic_expr)]
    EQ                reduce using rule 83 (arithmetic_expr)
    EQ                [reduce using rule 85 (arithmetic_expr)]
    NEQ               reduce using rule 83 (arithmetic_expr)
    NEQ               [reduce using rule 85 (arithmetic_expr)]
    MULEQ             reduce using rule 67 (lhs)
    DIVEQ             reduce using rule 67 (lhs)
    MODEQ             reduce using rule 67 (lhs)
    PLUSEQ            reduce using rule 67 (lhs)
    MINUSEQ           reduce using rule 67 (lhs)
    STAR              reduce using rule 83 (arithmetic_expr)
    STAR              [reduce using rule 85 (arithmetic_expr)]
    ADDITION          reduce using rule 83 (arithmetic_expr)
    ADDITION          [reduce using rule 85 (arithmetic_expr)]
    MINUS             reduce using rule 83 (arithmetic_expr)
    MINUS             [reduce using rule 85 (arithmetic_expr)]
    DIVISION          reduce using rule 83 (arithmetic_expr)
    DIVISION          [reduce using rule 85 (arithmetic_expr)]
    MODULO            reduce using rule 83 (arithmetic_expr)
    MODULO            [reduce using rule 85 (arithmetic_expr)]
    LESSTHAN          reduce using rule 83 (arithmetic_expr)
    LESSTHAN          [reduce using rule 85 (arithmetic_expr)]
    GREATERTHAN       reduce using rule 83 (arithmetic_expr)
    GREATERTHAN       [reduce using rule 85 (arithmetic_expr)]
    ASSIGN            reduce using rule 67 (lhs)
    COMMA             reduce using rule 40 (sub_decl)
    COMMA             [reduce using rule 83 (arithmetic_expr)]
    COMMA             [reduce using rule 85 (arithmetic_expr)]
    ';'               reduce using rule 40 (sub_decl)
    ';'               [reduce using rule 83 (arithmetic_expr)]
    ';'               [reduce using rule 85 (arithmetic_expr)]
    $default          reduce using rule 83 (arithmetic_expr)


state 127

   32 while_block: WHILE '(' expression ')' . stmt

    IDENTIFIER  shift, and go to state 3
    INCREMENT   shift, and go to state 4
    DECREMENT   shift, and go to state 5
    SHORT       shift, and go to state 6
    INT         shift, and go to state 7
    LONG        shift, and go to state 8
    LONG_LONG   shift, and go to state 9
    SIGNED      shift, and go to state 10
    UNSIGNED    shift, and go to state 11
    CHAR        shift, and go to state 12
    BOOLEAN     shift, and go to state 13
    IF          shift, and go to state 14
    FOR         shift, and go to state 15
    WHILE       shift, and go to state 16
    CONTINUE    shift, and go to state 17
    BREAK       shift, and go to state 18
    RETURN      shift, and go to state 19
    '{'         shift, and go to state 20

    stmt              go to state 150
    compound_stmt     go to state 22
    data_type         go to state 23
    sign_specifier    go to state 24
    type_specifier    go to state 25
    single_stmt       go to state 26
    for_block         go to state 27
    if_block          go to state 28
    while_block       go to state 29
    declaration       go to state 30
    declaration_list  go to state 31
    sub_decl          go to state 32
    assignment_expr   go to state 33
    unary_expr        go to state 34
    lhs               go to state 35
    identifier        go to state 36
    array_access      go to state 37


state 128

   80 arithmetic_expr: '(' arithmetic_expr ')' .

    $default  reduce using rule 80 (arithmetic_expr)


state 129

   46 sub_expr: sub_expr . GREATERTHAN sub_expr
   47         | sub_expr . LESSTHAN sub_expr
   48         | sub_expr . EQ sub_expr
   49         | sub_expr . NEQ sub_expr
   50         | sub_expr . GREATERTHANEQUAL sub_expr
   51         | sub_expr . LESSTHANEQUAL sub_expr
   52         | sub_expr . AND sub_expr
   52         | sub_expr AND sub_expr .
   53         | sub_expr . OR sub_expr

    LESSTHANEQUAL     shift, and go to state 92
    GREATERTHANEQUAL  shift, and go to state 93
    EQ                shift, and go to state 94
    NEQ               shift, and go to state 95
    LESSTHAN          shift, and go to state 96
    GREATERTHAN       shift, and go to state 97

    $default  reduce using rule 52 (sub_expr)


state 130

   46 sub_expr: sub_expr . GREATERTHAN sub_expr
   47         | sub_expr . LESSTHAN sub_expr
   48         | sub_expr . EQ sub_expr
   49         | sub_expr . NEQ sub_expr
   50         | sub_expr . GREATERTHANEQUAL sub_expr
   51         | sub_expr . LESSTHANEQUAL sub_expr
   52         | sub_expr . AND sub_expr
   53         | sub_expr . OR sub_expr
   53         | sub_expr OR sub_expr .

    AND               shift, and go to state 90
    LESSTHANEQUAL     shift, and go to state 92
    GREATERTHANEQUAL  shift, and go to state 93
    EQ                shift, and go to state 94
    NEQ               shift, and go to state 95
    LESSTHAN          shift, and go to state 96
    GREATERTHAN       shift, and go to state 97

    $default  reduce using rule 53 (sub_expr)


state 131

   46 sub_expr: sub_expr . GREATERTHAN sub_expr
   47         | sub_expr . LESSTHAN sub_expr
   48         | sub_expr . EQ sub_expr
   49         | sub_expr . NEQ sub_expr
   50         | sub_expr . GREATERTHANEQUAL sub_expr
   51         | sub_expr . LESSTHANEQUAL sub_expr
   51         | sub_expr LESSTHANEQUAL sub_expr .
   52         | sub_expr . AND sub_expr
   53         | sub_expr . OR sub_expr

    $default  reduce using rule 51 (sub_expr)


state 132

   46 sub_expr: sub_expr . GREATERTHAN sub_expr
   47         | sub_expr . LESSTHAN sub_expr
   48         | sub_expr . EQ sub_expr
   49         | sub_expr . NEQ sub_expr
   50         | sub_expr . GREATERTHANEQUAL sub_expr
   50         | sub_expr GREATERTHANEQUAL sub_expr .
   51         | sub_expr . LESSTHANEQUAL sub_expr
   52         | sub_expr . AND sub_expr
   53         | sub_expr . OR sub_expr

    $default  reduce using rule 50 (sub_expr)


state 133

   46 sub_expr: sub_expr . GREATERTHAN sub_expr
   47         | sub_expr . LESSTHAN sub_expr
   48         | sub_expr . EQ sub_expr
   48         | sub_expr EQ sub_expr .
   49         | sub_expr . NEQ sub_expr
   50         | sub_expr . GREATERTHANEQUAL sub_expr
   51         | sub_expr . LESSTHANEQUAL sub_expr
   52         | sub_expr . AND sub_expr
   53         | sub_expr . OR sub_expr

    LESSTHANEQUAL     shift, and go to state 92
    GREATERTHANEQUAL  shift, and go to state 93
    LESSTHAN          shift, and go to state 96
    GREATERTHAN       shift, and go to state 97

    $default  reduce using rule 48 (sub_expr)


state 134

   46 sub_expr: sub_expr . GREATERTHAN sub_expr
   47         | sub_expr . LESSTHAN sub_expr
   48         | sub_expr . EQ sub_expr
   49         | sub_expr . NEQ sub_expr
   49         | sub_expr NEQ sub_expr .
   50         | sub_expr . GREATERTHANEQUAL sub_expr
   51         | sub_expr . LESSTHANEQUAL sub_expr
   52         | sub_expr . AND sub_expr
   53         | sub_expr . OR sub_expr

    LESSTHANEQUAL     shift, and go to state 92
    GREATERTHANEQUAL  shift, and go to state 93
    LESSTHAN          shift, and go to state 96
    GREATERTHAN       shift, and go to state 97

    $default  reduce using rule 49 (sub_expr)


state 135

   46 sub_expr: sub_expr . GREATERTHAN sub_expr
   47         | sub_expr . LESSTHAN sub_expr
   47         | sub_expr LESSTHAN sub_expr .
   48         | sub_expr . EQ sub_expr
   49         | sub_expr . NEQ sub_expr
   50         | sub_expr . GREATERTHANEQUAL sub_expr
   51         | sub_expr . LESSTHANEQUAL sub_expr
   52         | sub_expr . AND sub_expr
   53         | sub_expr . OR sub_expr

    $default  reduce using rule 47 (sub_expr)


state 136

   46 sub_expr: sub_expr . GREATERTHAN sub_expr
   46         | sub_expr GREATERTHAN sub_expr .
   47         | sub_expr . LESSTHAN sub_expr
   48         | sub_expr . EQ sub_expr
   49         | sub_expr . NEQ sub_expr
   50         | sub_expr . GREATERTHANEQUAL sub_expr
   51         | sub_expr . LESSTHANEQUAL sub_expr
   52         | sub_expr . AND sub_expr
   53         | sub_expr . OR sub_expr

    $default  reduce using rule 46 (sub_expr)


state 137

   75 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   76                | arithmetic_expr . MINUS arithmetic_expr
   77                | arithmetic_expr . STAR arithmetic_expr
   77                | arithmetic_expr STAR arithmetic_expr .
   78                | arithmetic_expr . DIVISION arithmetic_expr
   79                | arithmetic_expr . MODULO arithmetic_expr

    $default  reduce using rule 77 (arithmetic_expr)


state 138

   75 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   75                | arithmetic_expr ADDITION arithmetic_expr .
   76                | arithmetic_expr . MINUS arithmetic_expr
   77                | arithmetic_expr . STAR arithmetic_expr
   78                | arithmetic_expr . DIVISION arithmetic_expr
   79                | arithmetic_expr . MODULO arithmetic_expr

    STAR      shift, and go to state 99
    DIVISION  shift, and go to state 102
    MODULO    shift, and go to state 103

    $default  reduce using rule 75 (arithmetic_expr)


state 139

   75 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   76                | arithmetic_expr . MINUS arithmetic_expr
   76                | arithmetic_expr MINUS arithmetic_expr .
   77                | arithmetic_expr . STAR arithmetic_expr
   78                | arithmetic_expr . DIVISION arithmetic_expr
   79                | arithmetic_expr . MODULO arithmetic_expr

    STAR      shift, and go to state 99
    DIVISION  shift, and go to state 102
    MODULO    shift, and go to state 103

    $default  reduce using rule 76 (arithmetic_expr)


state 140

   75 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   76                | arithmetic_expr . MINUS arithmetic_expr
   77                | arithmetic_expr . STAR arithmetic_expr
   78                | arithmetic_expr . DIVISION arithmetic_expr
   78                | arithmetic_expr DIVISION arithmetic_expr .
   79                | arithmetic_expr . MODULO arithmetic_expr

    $default  reduce using rule 78 (arithmetic_expr)


state 141

   75 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   76                | arithmetic_expr . MINUS arithmetic_expr
   77                | arithmetic_expr . STAR arithmetic_expr
   78                | arithmetic_expr . DIVISION arithmetic_expr
   79                | arithmetic_expr . MODULO arithmetic_expr
   79                | arithmetic_expr MODULO arithmetic_expr .

    $default  reduce using rule 79 (arithmetic_expr)


state 142

    6 compound_stmt: '{' @1 statements '}' .

    $default  reduce using rule 6 (compound_stmt)


state 143

   92 arr: '[' array_index ']' . arr
   93    | '[' array_index ']' .

    '['  shift, and go to state 79

    $default  reduce using rule 93 (arr)

    arr  go to state 151


state 144

   44 expression: expression COMMA sub_expr .
   46 sub_expr: sub_expr . GREATERTHAN sub_expr
   47         | sub_expr . LESSTHAN sub_expr
   48         | sub_expr . EQ sub_expr
   49         | sub_expr . NEQ sub_expr
   50         | sub_expr . GREATERTHANEQUAL sub_expr
   51         | sub_expr . LESSTHANEQUAL sub_expr
   52         | sub_expr . AND sub_expr
   53         | sub_expr . OR sub_expr

    AND               shift, and go to state 90
    OR                shift, and go to state 91
    LESSTHANEQUAL     shift, and go to state 92
    GREATERTHANEQUAL  shift, and go to state 93
    EQ                shift, and go to state 94
    NEQ               shift, and go to state 95
    LESSTHAN          shift, and go to state 96
    GREATERTHAN       shift, and go to state 97

    $default  reduce using rule 44 (expression)


state 145

   30 if_block: IF '(' expression ')' stmt .
   31         | IF '(' expression ')' stmt . ELSE stmt

    ELSE  shift, and go to state 152

    $default  reduce using rule 30 (if_block)


state 146

   41 expression_stmt: data_type expression . ';'
   44 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 115
    ';'    shift, and go to state 153


state 147

   41 expression_stmt: data_type . expression ';'

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    expression       go to state 146
    sub_expr         go to state 82
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 148

   27 for_block: FOR '(' @2 for_declaration expression_stmt . expression ')' @3 stmt

    IDENTIFIER       shift, and go to state 3
    INTEGER_LITERAL  shift, and go to state 47
    CHAR_LITERAL     shift, and go to state 48
    INCREMENT        shift, and go to state 4
    DECREMENT        shift, and go to state 5
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    TRUE             shift, and go to state 51
    FALSE            shift, and go to state 52
    '('              shift, and go to state 54

    expression       go to state 154
    sub_expr         go to state 82
    assignment_expr  go to state 56
    unary_expr       go to state 57
    lhs              go to state 35
    identifier       go to state 58
    arithmetic_expr  go to state 59
    constant         go to state 60
    array_access     go to state 61


state 149

   42 expression_stmt: expression ';' .

    $default  reduce using rule 42 (expression_stmt)


state 150

   32 while_block: WHILE '(' expression ')' stmt .

    $default  reduce using rule 32 (while_block)


state 151

   92 arr: '[' array_index ']' arr .

    $default  reduce using rule 92 (arr)


state 152

   31 if_block: IF '(' expression ')' stmt ELSE . stmt

    IDENTIFIER  shift, and go to state 3
    INCREMENT   shift, and go to state 4
    DECREMENT   shift, and go to state 5
    SHORT       shift, and go to state 6
    INT         shift, and go to state 7
    LONG        shift, and go to state 8
    LONG_LONG   shift, and go to state 9
    SIGNED      shift, and go to state 10
    UNSIGNED    shift, and go to state 11
    CHAR        shift, and go to state 12
    BOOLEAN     shift, and go to state 13
    IF          shift, and go to state 14
    FOR         shift, and go to state 15
    WHILE       shift, and go to state 16
    CONTINUE    shift, and go to state 17
    BREAK       shift, and go to state 18
    RETURN      shift, and go to state 19
    '{'         shift, and go to state 20

    stmt              go to state 155
    compound_stmt     go to state 22
    data_type         go to state 23
    sign_specifier    go to state 24
    type_specifier    go to state 25
    single_stmt       go to state 26
    for_block         go to state 27
    if_block          go to state 28
    while_block       go to state 29
    declaration       go to state 30
    declaration_list  go to state 31
    sub_decl          go to state 32
    assignment_expr   go to state 33
    unary_expr        go to state 34
    lhs               go to state 35
    identifier        go to state 36
    array_access      go to state 37


state 153

   41 expression_stmt: data_type expression ';' .

    $default  reduce using rule 41 (expression_stmt)


state 154

   27 for_block: FOR '(' @2 for_declaration expression_stmt expression . ')' @3 stmt
   44 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 115
    ')'    shift, and go to state 156


state 155

   31 if_block: IF '(' expression ')' stmt ELSE stmt .

    $default  reduce using rule 31 (if_block)


state 156

   27 for_block: FOR '(' @2 for_declaration expression_stmt expression ')' . @3 stmt

    $default  reduce using rule 26 (@3)

    @3  go to state 157


state 157

   27 for_block: FOR '(' @2 for_declaration expression_stmt expression ')' @3 . stmt

    IDENTIFIER  shift, and go to state 3
    INCREMENT   shift, and go to state 4
    DECREMENT   shift, and go to state 5
    SHORT       shift, and go to state 6
    INT         shift, and go to state 7
    LONG        shift, and go to state 8
    LONG_LONG   shift, and go to state 9
    SIGNED      shift, and go to state 10
    UNSIGNED    shift, and go to state 11
    CHAR        shift, and go to state 12
    BOOLEAN     shift, and go to state 13
    IF          shift, and go to state 14
    FOR         shift, and go to state 15
    WHILE       shift, and go to state 16
    CONTINUE    shift, and go to state 17
    BREAK       shift, and go to state 18
    RETURN      shift, and go to state 19
    '{'         shift, and go to state 20

    stmt              go to state 158
    compound_stmt     go to state 22
    data_type         go to state 23
    sign_specifier    go to state 24
    type_specifier    go to state 25
    single_stmt       go to state 26
    for_block         go to state 27
    if_block          go to state 28
    while_block       go to state 29
    declaration       go to state 30
    declaration_list  go to state 31
    sub_decl          go to state 32
    assignment_expr   go to state 33
    unary_expr        go to state 34
    lhs               go to state 35
    identifier        go to state 36
    array_access      go to state 37


state 158

   27 for_block: FOR '(' @2 for_declaration expression_stmt expression ')' @3 stmt .

    $default  reduce using rule 27 (for_block)
