Terminals which are not used

   STRING_LITERAL
   CHAR_LITERAL
   AND
   AMPERSAND
   CONST
   VOID
   CASE
   DEFAULT
   DO
   SWITCH
   NEGATION
   SHIFTLEFT
   SHIFTRIGHT
   BITXOR
   BITOR
   QUESTION
   SHIFTLEQ
   SHIFTREQ
   BITANDEQ
   BITXOREQ
   BITOREQ
   HASH
   TRUE
   FALSE
   PRINTF
   SCANF
   GETS
   PUTS
   SIZEOF
   LOOP
   SUM
   MAX
   MIN
   FULL_STOP
   OPEN_SQUARE
   CLOSE_SQUARE
   COLON


State 0 conflicts: 1 shift/reduce
State 3 conflicts: 18 shift/reduce, 21 reduce/reduce
State 4 conflicts: 19 shift/reduce
State 115 conflicts: 18 shift/reduce
State 119 conflicts: 18 shift/reduce
State 140 conflicts: 18 shift/reduce
State 141 conflicts: 18 shift/reduce


Grammar

    0 $accept: compound_stmt $end

    1 compound_stmt: '{' statements '}'
    2              | statements

    3 statements: statements stmt
    4           | /* empty */

    5 stmt: compound_stmt
    6     | single_stmt

    7 data_type: sign_specifier type_specifier
    8          | type_specifier

    9 sign_specifier: SIGNED
   10               | UNSIGNED

   11 type_specifier: INT
   12               | SHORT
   13               | LONG
   14               | LONG_LONG
   15               | CHAR
   16               | BOOLEAN

   17 single_stmt: if_block
   18            | for_block
   19            | while_block
   20            | declaration
   21            | RETURN ';'
   22            | CONTINUE ';'
   23            | BREAK ';'
   24            | RETURN sub_expr ';'

   25 for_block: FOR '(' for_declaration expression_stmt expression ')' stmt

   26 for_declaration: data_type declaration_list ';'
   27                | expression_stmt

   28 if_block: IF '(' expression ')' stmt
   29         | IF '(' expression ')' stmt ELSE stmt

   30 while_block: WHILE '(' expression ')' stmt

   31 declaration: data_type declaration_list ';'
   32            | declaration_list ';'
   33            | unary_expr ';'

   34 declaration_list: declaration_list COMMA sub_decl
   35                 | sub_decl

   36 sub_decl: assignment_expr
   37         | identifier
   38         | array_access

   39 expression_stmt: expression ';'
   40                | ';'

   41 expression: expression COMMA sub_expr
   42           | sub_expr

   43 sub_expr: sub_expr GREATERTHAN sub_expr
   44         | sub_expr LESSTHAN sub_expr
   45         | sub_expr EQ sub_expr
   46         | sub_expr NEQ sub_expr
   47         | sub_expr GREATERTHANEQUAL sub_expr
   48         | sub_expr LESSTHANEQUAL sub_expr
   49         | sub_expr LOGICAL_AND sub_expr
   50         | sub_expr OR sub_expr
   51         | EXCLAIMATION sub_expr
   52         | arithmetic_expr
   53         | assignment_expr
   54         | unary_expr

   55 assignment_expr: lhs assign arithmetic_expr
   56                | lhs assign array_access
   57                | lhs assign unary_expr
   58                | unary_expr assign unary_expr

   59 unary_expr: identifier INCREMENT
   60           | identifier DECREMENT
   61           | DECREMENT identifier
   62           | INCREMENT identifier

   63 lhs: identifier
   64    | array_access

   65 identifier: IDENTIFIER

   66 assign: ASSIGN
   67       | PLUSEQ
   68       | MINUSEQ
   69       | MULEQ
   70       | DIVEQ
   71       | MODEQ

   72 arithmetic_expr: arithmetic_expr ADDITION arithmetic_expr
   73                | arithmetic_expr MINUS arithmetic_expr
   74                | arithmetic_expr STAR arithmetic_expr
   75                | arithmetic_expr DIVISION arithmetic_expr
   76                | arithmetic_expr MODULO arithmetic_expr
   77                | '(' arithmetic_expr ')'
   78                | MINUS arithmetic_expr
   79                | identifier
   80                | constant

   81 constant: INTEGER_LITERAL

   82 array_access: identifier '[' array_index ']'

   83 array_index: constant
   84            | identifier


Terminals, with rules where they appear

$end (0) 0
'(' (40) 25 28 29 30 77
')' (41) 25 28 29 30 77
';' (59) 21 22 23 24 26 31 32 33 39 40
'[' (91) 82
']' (93) 82
'{' (123) 1
'}' (125) 1
error (256)
IDENTIFIER (258) 65
INTEGER_LITERAL (259) 81
STRING_LITERAL (260)
CHAR_LITERAL (261)
AND (262)
OR (263) 50
LESSTHANEQUAL (264) 48
GREATERTHANEQUAL (265) 47
EQ (266) 45
NEQ (267) 46
AMPERSAND (268)
MULEQ (269) 69
DIVEQ (270) 70
MODEQ (271) 71
PLUSEQ (272) 67
MINUSEQ (273) 68
INCREMENT (274) 59 62
DECREMENT (275) 60 61
SHORT (276) 12
INT (277) 11
LONG (278) 13
LONG_LONG (279) 14
SIGNED (280) 9
UNSIGNED (281) 10
CONST (282)
CHAR (283) 15
BOOLEAN (284) 16
VOID (285)
IF (286) 28 29
FOR (287) 25
WHILE (288) 30
CONTINUE (289) 22
BREAK (290) 23
RETURN (291) 21 24
CASE (292)
DEFAULT (293)
DO (294)
ELSE (295) 29
SWITCH (296)
STAR (297) 74
ADDITION (298) 72
MINUS (299) 73 78
NEGATION (300)
EXCLAIMATION (301) 51
DIVISION (302) 75
MODULO (303) 76
SHIFTLEFT (304)
SHIFTRIGHT (305)
LESSTHAN (306) 44
GREATERTHAN (307) 43
BITXOR (308)
BITOR (309)
QUESTION (310)
ASSIGN (311) 66
SHIFTLEQ (312)
SHIFTREQ (313)
BITANDEQ (314)
BITXOREQ (315)
BITOREQ (316)
HASH (317)
TRUE (318)
FALSE (319)
PRINTF (320)
SCANF (321)
GETS (322)
PUTS (323)
SIZEOF (324)
LOOP (325)
SUM (326)
MAX (327)
MIN (328)
COMMA (329) 34 41
FULL_STOP (330)
OPEN_SQUARE (331)
CLOSE_SQUARE (332)
COLON (333)
LOGICAL_AND (334) 49
UMINUS (335)
LOWER_THAN_ELSE (336)


Nonterminals, with rules where they appear

$accept (89)
    on left: 0
compound_stmt (90)
    on left: 1 2, on right: 0 5
statements (91)
    on left: 3 4, on right: 1 2 3
stmt (92)
    on left: 5 6, on right: 3 25 28 29 30
data_type (93)
    on left: 7 8, on right: 26 31
sign_specifier (94)
    on left: 9 10, on right: 7
type_specifier (95)
    on left: 11 12 13 14 15 16, on right: 7 8
single_stmt (96)
    on left: 17 18 19 20 21 22 23 24, on right: 6
for_block (97)
    on left: 25, on right: 18
for_declaration (98)
    on left: 26 27, on right: 25
if_block (99)
    on left: 28 29, on right: 17
while_block (100)
    on left: 30, on right: 19
declaration (101)
    on left: 31 32 33, on right: 20
declaration_list (102)
    on left: 34 35, on right: 26 31 32 34
sub_decl (103)
    on left: 36 37 38, on right: 34 35
expression_stmt (104)
    on left: 39 40, on right: 25 27
expression (105)
    on left: 41 42, on right: 25 28 29 30 39 41
sub_expr (106)
    on left: 43 44 45 46 47 48 49 50 51 52 53 54, on right: 24 41 42
    43 44 45 46 47 48 49 50 51
assignment_expr (107)
    on left: 55 56 57 58, on right: 36 53
unary_expr (108)
    on left: 59 60 61 62, on right: 33 54 57 58
lhs (109)
    on left: 63 64, on right: 55 56 57
identifier (110)
    on left: 65, on right: 37 59 60 61 62 63 79 82 84
assign (111)
    on left: 66 67 68 69 70 71, on right: 55 56 57 58
arithmetic_expr (112)
    on left: 72 73 74 75 76 77 78 79 80, on right: 52 55 72 73 74 75
    76 77 78
constant (113)
    on left: 81, on right: 80 83
array_access (114)
    on left: 82, on right: 38 56 64
array_index (115)
    on left: 83 84, on right: 82


state 0

    0 $accept: . compound_stmt $end

    '{'  shift, and go to state 1

    '{'       [reduce using rule 4 (statements)]
    $default  reduce using rule 4 (statements)

    compound_stmt  go to state 2
    statements     go to state 3


state 1

    1 compound_stmt: '{' . statements '}'

    $default  reduce using rule 4 (statements)

    statements  go to state 4


state 2

    0 $accept: compound_stmt . $end

    $end  shift, and go to state 5


state 3

    2 compound_stmt: statements .
    3 statements: statements . stmt

    IDENTIFIER  shift, and go to state 6
    INCREMENT   shift, and go to state 7
    DECREMENT   shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    LONG_LONG   shift, and go to state 12
    SIGNED      shift, and go to state 13
    UNSIGNED    shift, and go to state 14
    CHAR        shift, and go to state 15
    BOOLEAN     shift, and go to state 16
    IF          shift, and go to state 17
    FOR         shift, and go to state 18
    WHILE       shift, and go to state 19
    CONTINUE    shift, and go to state 20
    BREAK       shift, and go to state 21
    RETURN      shift, and go to state 22
    '{'         shift, and go to state 1

    $end        reduce using rule 2 (compound_stmt)
    $end        [reduce using rule 4 (statements)]
    IDENTIFIER  [reduce using rule 2 (compound_stmt)]
    IDENTIFIER  [reduce using rule 4 (statements)]
    INCREMENT   [reduce using rule 2 (compound_stmt)]
    INCREMENT   [reduce using rule 4 (statements)]
    DECREMENT   [reduce using rule 2 (compound_stmt)]
    DECREMENT   [reduce using rule 4 (statements)]
    SHORT       [reduce using rule 2 (compound_stmt)]
    SHORT       [reduce using rule 4 (statements)]
    INT         [reduce using rule 2 (compound_stmt)]
    INT         [reduce using rule 4 (statements)]
    LONG        [reduce using rule 2 (compound_stmt)]
    LONG        [reduce using rule 4 (statements)]
    LONG_LONG   [reduce using rule 2 (compound_stmt)]
    LONG_LONG   [reduce using rule 4 (statements)]
    SIGNED      [reduce using rule 2 (compound_stmt)]
    SIGNED      [reduce using rule 4 (statements)]
    UNSIGNED    [reduce using rule 2 (compound_stmt)]
    UNSIGNED    [reduce using rule 4 (statements)]
    CHAR        [reduce using rule 2 (compound_stmt)]
    CHAR        [reduce using rule 4 (statements)]
    BOOLEAN     [reduce using rule 2 (compound_stmt)]
    BOOLEAN     [reduce using rule 4 (statements)]
    IF          [reduce using rule 2 (compound_stmt)]
    IF          [reduce using rule 4 (statements)]
    FOR         [reduce using rule 2 (compound_stmt)]
    FOR         [reduce using rule 4 (statements)]
    WHILE       [reduce using rule 2 (compound_stmt)]
    WHILE       [reduce using rule 4 (statements)]
    CONTINUE    [reduce using rule 2 (compound_stmt)]
    CONTINUE    [reduce using rule 4 (statements)]
    BREAK       [reduce using rule 2 (compound_stmt)]
    BREAK       [reduce using rule 4 (statements)]
    RETURN      [reduce using rule 2 (compound_stmt)]
    RETURN      [reduce using rule 4 (statements)]
    ELSE        reduce using rule 2 (compound_stmt)
    ELSE        [reduce using rule 4 (statements)]
    '{'         [reduce using rule 2 (compound_stmt)]
    '{'         [reduce using rule 4 (statements)]
    '}'         reduce using rule 2 (compound_stmt)
    '}'         [reduce using rule 4 (statements)]
    $default    reduce using rule 2 (compound_stmt)

    compound_stmt     go to state 23
    statements        go to state 3
    stmt              go to state 24
    data_type         go to state 25
    sign_specifier    go to state 26
    type_specifier    go to state 27
    single_stmt       go to state 28
    for_block         go to state 29
    if_block          go to state 30
    while_block       go to state 31
    declaration       go to state 32
    declaration_list  go to state 33
    sub_decl          go to state 34
    assignment_expr   go to state 35
    unary_expr        go to state 36
    lhs               go to state 37
    identifier        go to state 38
    array_access      go to state 39


state 4

    1 compound_stmt: '{' statements . '}'
    3 statements: statements . stmt

    IDENTIFIER  shift, and go to state 6
    INCREMENT   shift, and go to state 7
    DECREMENT   shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    LONG_LONG   shift, and go to state 12
    SIGNED      shift, and go to state 13
    UNSIGNED    shift, and go to state 14
    CHAR        shift, and go to state 15
    BOOLEAN     shift, and go to state 16
    IF          shift, and go to state 17
    FOR         shift, and go to state 18
    WHILE       shift, and go to state 19
    CONTINUE    shift, and go to state 20
    BREAK       shift, and go to state 21
    RETURN      shift, and go to state 22
    '{'         shift, and go to state 1
    '}'         shift, and go to state 40

    IDENTIFIER  [reduce using rule 4 (statements)]
    INCREMENT   [reduce using rule 4 (statements)]
    DECREMENT   [reduce using rule 4 (statements)]
    SHORT       [reduce using rule 4 (statements)]
    INT         [reduce using rule 4 (statements)]
    LONG        [reduce using rule 4 (statements)]
    LONG_LONG   [reduce using rule 4 (statements)]
    SIGNED      [reduce using rule 4 (statements)]
    UNSIGNED    [reduce using rule 4 (statements)]
    CHAR        [reduce using rule 4 (statements)]
    BOOLEAN     [reduce using rule 4 (statements)]
    IF          [reduce using rule 4 (statements)]
    FOR         [reduce using rule 4 (statements)]
    WHILE       [reduce using rule 4 (statements)]
    CONTINUE    [reduce using rule 4 (statements)]
    BREAK       [reduce using rule 4 (statements)]
    RETURN      [reduce using rule 4 (statements)]
    '{'         [reduce using rule 4 (statements)]
    '}'         [reduce using rule 4 (statements)]

    compound_stmt     go to state 23
    statements        go to state 3
    stmt              go to state 24
    data_type         go to state 25
    sign_specifier    go to state 26
    type_specifier    go to state 27
    single_stmt       go to state 28
    for_block         go to state 29
    if_block          go to state 30
    while_block       go to state 31
    declaration       go to state 32
    declaration_list  go to state 33
    sub_decl          go to state 34
    assignment_expr   go to state 35
    unary_expr        go to state 36
    lhs               go to state 37
    identifier        go to state 38
    array_access      go to state 39


state 5

    0 $accept: compound_stmt $end .

    $default  accept


state 6

   65 identifier: IDENTIFIER .

    $default  reduce using rule 65 (identifier)


state 7

   62 unary_expr: INCREMENT . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 41


state 8

   61 unary_expr: DECREMENT . identifier

    IDENTIFIER  shift, and go to state 6

    identifier  go to state 42


state 9

   12 type_specifier: SHORT .

    $default  reduce using rule 12 (type_specifier)


state 10

   11 type_specifier: INT .

    $default  reduce using rule 11 (type_specifier)


state 11

   13 type_specifier: LONG .

    $default  reduce using rule 13 (type_specifier)


state 12

   14 type_specifier: LONG_LONG .

    $default  reduce using rule 14 (type_specifier)


state 13

    9 sign_specifier: SIGNED .

    $default  reduce using rule 9 (sign_specifier)


state 14

   10 sign_specifier: UNSIGNED .

    $default  reduce using rule 10 (sign_specifier)


state 15

   15 type_specifier: CHAR .

    $default  reduce using rule 15 (type_specifier)


state 16

   16 type_specifier: BOOLEAN .

    $default  reduce using rule 16 (type_specifier)


state 17

   28 if_block: IF . '(' expression ')' stmt
   29         | IF . '(' expression ')' stmt ELSE stmt

    '('  shift, and go to state 43


state 18

   25 for_block: FOR . '(' for_declaration expression_stmt expression ')' stmt

    '('  shift, and go to state 44


state 19

   30 while_block: WHILE . '(' expression ')' stmt

    '('  shift, and go to state 45


state 20

   22 single_stmt: CONTINUE . ';'

    ';'  shift, and go to state 46


state 21

   23 single_stmt: BREAK . ';'

    ';'  shift, and go to state 47


state 22

   21 single_stmt: RETURN . ';'
   24            | RETURN . sub_expr ';'

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    ';'              shift, and go to state 51
    '('              shift, and go to state 52

    sub_expr         go to state 53
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 23

    5 stmt: compound_stmt .

    $default  reduce using rule 5 (stmt)


state 24

    3 statements: statements stmt .

    $default  reduce using rule 3 (statements)


state 25

   31 declaration: data_type . declaration_list ';'

    IDENTIFIER  shift, and go to state 6
    INCREMENT   shift, and go to state 7
    DECREMENT   shift, and go to state 8

    declaration_list  go to state 60
    sub_decl          go to state 34
    assignment_expr   go to state 35
    unary_expr        go to state 61
    lhs               go to state 37
    identifier        go to state 38
    array_access      go to state 39


state 26

    7 data_type: sign_specifier . type_specifier

    SHORT      shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 11
    LONG_LONG  shift, and go to state 12
    CHAR       shift, and go to state 15
    BOOLEAN    shift, and go to state 16

    type_specifier  go to state 62


state 27

    8 data_type: type_specifier .

    $default  reduce using rule 8 (data_type)


state 28

    6 stmt: single_stmt .

    $default  reduce using rule 6 (stmt)


state 29

   18 single_stmt: for_block .

    $default  reduce using rule 18 (single_stmt)


state 30

   17 single_stmt: if_block .

    $default  reduce using rule 17 (single_stmt)


state 31

   19 single_stmt: while_block .

    $default  reduce using rule 19 (single_stmt)


state 32

   20 single_stmt: declaration .

    $default  reduce using rule 20 (single_stmt)


state 33

   32 declaration: declaration_list . ';'
   34 declaration_list: declaration_list . COMMA sub_decl

    COMMA  shift, and go to state 63
    ';'    shift, and go to state 64


state 34

   35 declaration_list: sub_decl .

    $default  reduce using rule 35 (declaration_list)


state 35

   36 sub_decl: assignment_expr .

    $default  reduce using rule 36 (sub_decl)


state 36

   33 declaration: unary_expr . ';'
   58 assignment_expr: unary_expr . assign unary_expr

    MULEQ    shift, and go to state 65
    DIVEQ    shift, and go to state 66
    MODEQ    shift, and go to state 67
    PLUSEQ   shift, and go to state 68
    MINUSEQ  shift, and go to state 69
    ASSIGN   shift, and go to state 70
    ';'      shift, and go to state 71

    assign  go to state 72


state 37

   55 assignment_expr: lhs . assign arithmetic_expr
   56                | lhs . assign array_access
   57                | lhs . assign unary_expr

    MULEQ    shift, and go to state 65
    DIVEQ    shift, and go to state 66
    MODEQ    shift, and go to state 67
    PLUSEQ   shift, and go to state 68
    MINUSEQ  shift, and go to state 69
    ASSIGN   shift, and go to state 70

    assign  go to state 73


state 38

   37 sub_decl: identifier .
   59 unary_expr: identifier . INCREMENT
   60           | identifier . DECREMENT
   63 lhs: identifier .
   82 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 74
    DECREMENT  shift, and go to state 75
    '['        shift, and go to state 76

    COMMA     reduce using rule 37 (sub_decl)
    ';'       reduce using rule 37 (sub_decl)
    $default  reduce using rule 63 (lhs)


state 39

   38 sub_decl: array_access .
   64 lhs: array_access .

    COMMA     reduce using rule 38 (sub_decl)
    ';'       reduce using rule 38 (sub_decl)
    $default  reduce using rule 64 (lhs)


state 40

    1 compound_stmt: '{' statements '}' .

    $default  reduce using rule 1 (compound_stmt)


state 41

   62 unary_expr: INCREMENT identifier .

    $default  reduce using rule 62 (unary_expr)


state 42

   61 unary_expr: DECREMENT identifier .

    $default  reduce using rule 61 (unary_expr)


state 43

   28 if_block: IF '(' . expression ')' stmt
   29         | IF '(' . expression ')' stmt ELSE stmt

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    expression       go to state 77
    sub_expr         go to state 78
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 44

   25 for_block: FOR '(' . for_declaration expression_stmt expression ')' stmt

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    SHORT            shift, and go to state 9
    INT              shift, and go to state 10
    LONG             shift, and go to state 11
    LONG_LONG        shift, and go to state 12
    SIGNED           shift, and go to state 13
    UNSIGNED         shift, and go to state 14
    CHAR             shift, and go to state 15
    BOOLEAN          shift, and go to state 16
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    ';'              shift, and go to state 79
    '('              shift, and go to state 52

    data_type        go to state 80
    sign_specifier   go to state 26
    type_specifier   go to state 27
    for_declaration  go to state 81
    expression_stmt  go to state 82
    expression       go to state 83
    sub_expr         go to state 78
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 45

   30 while_block: WHILE '(' . expression ')' stmt

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    expression       go to state 84
    sub_expr         go to state 78
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 46

   22 single_stmt: CONTINUE ';' .

    $default  reduce using rule 22 (single_stmt)


state 47

   23 single_stmt: BREAK ';' .

    $default  reduce using rule 23 (single_stmt)


state 48

   81 constant: INTEGER_LITERAL .

    $default  reduce using rule 81 (constant)


state 49

   78 arithmetic_expr: MINUS . arithmetic_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    MINUS            shift, and go to state 49
    '('              shift, and go to state 52

    identifier       go to state 85
    arithmetic_expr  go to state 86
    constant         go to state 58


state 50

   51 sub_expr: EXCLAIMATION . sub_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    sub_expr         go to state 87
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 51

   21 single_stmt: RETURN ';' .

    $default  reduce using rule 21 (single_stmt)


state 52

   77 arithmetic_expr: '(' . arithmetic_expr ')'

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    MINUS            shift, and go to state 49
    '('              shift, and go to state 52

    identifier       go to state 85
    arithmetic_expr  go to state 88
    constant         go to state 58


state 53

   24 single_stmt: RETURN sub_expr . ';'
   43 sub_expr: sub_expr . GREATERTHAN sub_expr
   44         | sub_expr . LESSTHAN sub_expr
   45         | sub_expr . EQ sub_expr
   46         | sub_expr . NEQ sub_expr
   47         | sub_expr . GREATERTHANEQUAL sub_expr
   48         | sub_expr . LESSTHANEQUAL sub_expr
   49         | sub_expr . LOGICAL_AND sub_expr
   50         | sub_expr . OR sub_expr

    OR                shift, and go to state 89
    LESSTHANEQUAL     shift, and go to state 90
    GREATERTHANEQUAL  shift, and go to state 91
    EQ                shift, and go to state 92
    NEQ               shift, and go to state 93
    LESSTHAN          shift, and go to state 94
    GREATERTHAN       shift, and go to state 95
    LOGICAL_AND       shift, and go to state 96
    ';'               shift, and go to state 97


state 54

   53 sub_expr: assignment_expr .

    $default  reduce using rule 53 (sub_expr)


state 55

   54 sub_expr: unary_expr .
   58 assignment_expr: unary_expr . assign unary_expr

    MULEQ    shift, and go to state 65
    DIVEQ    shift, and go to state 66
    MODEQ    shift, and go to state 67
    PLUSEQ   shift, and go to state 68
    MINUSEQ  shift, and go to state 69
    ASSIGN   shift, and go to state 70

    $default  reduce using rule 54 (sub_expr)

    assign  go to state 72


state 56

   59 unary_expr: identifier . INCREMENT
   60           | identifier . DECREMENT
   63 lhs: identifier .
   79 arithmetic_expr: identifier .
   82 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 74
    DECREMENT  shift, and go to state 75
    '['        shift, and go to state 76

    MULEQ     reduce using rule 63 (lhs)
    DIVEQ     reduce using rule 63 (lhs)
    MODEQ     reduce using rule 63 (lhs)
    PLUSEQ    reduce using rule 63 (lhs)
    MINUSEQ   reduce using rule 63 (lhs)
    ASSIGN    reduce using rule 63 (lhs)
    $default  reduce using rule 79 (arithmetic_expr)


state 57

   52 sub_expr: arithmetic_expr .
   72 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   73                | arithmetic_expr . MINUS arithmetic_expr
   74                | arithmetic_expr . STAR arithmetic_expr
   75                | arithmetic_expr . DIVISION arithmetic_expr
   76                | arithmetic_expr . MODULO arithmetic_expr

    STAR      shift, and go to state 98
    ADDITION  shift, and go to state 99
    MINUS     shift, and go to state 100
    DIVISION  shift, and go to state 101
    MODULO    shift, and go to state 102

    $default  reduce using rule 52 (sub_expr)


state 58

   80 arithmetic_expr: constant .

    $default  reduce using rule 80 (arithmetic_expr)


state 59

   64 lhs: array_access .

    $default  reduce using rule 64 (lhs)


state 60

   31 declaration: data_type declaration_list . ';'
   34 declaration_list: declaration_list . COMMA sub_decl

    COMMA  shift, and go to state 63
    ';'    shift, and go to state 103


state 61

   58 assignment_expr: unary_expr . assign unary_expr

    MULEQ    shift, and go to state 65
    DIVEQ    shift, and go to state 66
    MODEQ    shift, and go to state 67
    PLUSEQ   shift, and go to state 68
    MINUSEQ  shift, and go to state 69
    ASSIGN   shift, and go to state 70

    assign  go to state 72


state 62

    7 data_type: sign_specifier type_specifier .

    $default  reduce using rule 7 (data_type)


state 63

   34 declaration_list: declaration_list COMMA . sub_decl

    IDENTIFIER  shift, and go to state 6
    INCREMENT   shift, and go to state 7
    DECREMENT   shift, and go to state 8

    sub_decl         go to state 104
    assignment_expr  go to state 35
    unary_expr       go to state 61
    lhs              go to state 37
    identifier       go to state 38
    array_access     go to state 39


state 64

   32 declaration: declaration_list ';' .

    $default  reduce using rule 32 (declaration)


state 65

   69 assign: MULEQ .

    $default  reduce using rule 69 (assign)


state 66

   70 assign: DIVEQ .

    $default  reduce using rule 70 (assign)


state 67

   71 assign: MODEQ .

    $default  reduce using rule 71 (assign)


state 68

   67 assign: PLUSEQ .

    $default  reduce using rule 67 (assign)


state 69

   68 assign: MINUSEQ .

    $default  reduce using rule 68 (assign)


state 70

   66 assign: ASSIGN .

    $default  reduce using rule 66 (assign)


state 71

   33 declaration: unary_expr ';' .

    $default  reduce using rule 33 (declaration)


state 72

   58 assignment_expr: unary_expr assign . unary_expr

    IDENTIFIER  shift, and go to state 6
    INCREMENT   shift, and go to state 7
    DECREMENT   shift, and go to state 8

    unary_expr  go to state 105
    identifier  go to state 106


state 73

   55 assignment_expr: lhs assign . arithmetic_expr
   56                | lhs assign . array_access
   57                | lhs assign . unary_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    '('              shift, and go to state 52

    unary_expr       go to state 107
    identifier       go to state 108
    arithmetic_expr  go to state 109
    constant         go to state 58
    array_access     go to state 110


state 74

   59 unary_expr: identifier INCREMENT .

    $default  reduce using rule 59 (unary_expr)


state 75

   60 unary_expr: identifier DECREMENT .

    $default  reduce using rule 60 (unary_expr)


state 76

   82 array_access: identifier '[' . array_index ']'

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48

    identifier   go to state 111
    constant     go to state 112
    array_index  go to state 113


state 77

   28 if_block: IF '(' expression . ')' stmt
   29         | IF '(' expression . ')' stmt ELSE stmt
   41 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 114
    ')'    shift, and go to state 115


state 78

   42 expression: sub_expr .
   43 sub_expr: sub_expr . GREATERTHAN sub_expr
   44         | sub_expr . LESSTHAN sub_expr
   45         | sub_expr . EQ sub_expr
   46         | sub_expr . NEQ sub_expr
   47         | sub_expr . GREATERTHANEQUAL sub_expr
   48         | sub_expr . LESSTHANEQUAL sub_expr
   49         | sub_expr . LOGICAL_AND sub_expr
   50         | sub_expr . OR sub_expr

    OR                shift, and go to state 89
    LESSTHANEQUAL     shift, and go to state 90
    GREATERTHANEQUAL  shift, and go to state 91
    EQ                shift, and go to state 92
    NEQ               shift, and go to state 93
    LESSTHAN          shift, and go to state 94
    GREATERTHAN       shift, and go to state 95
    LOGICAL_AND       shift, and go to state 96

    $default  reduce using rule 42 (expression)


state 79

   40 expression_stmt: ';' .

    $default  reduce using rule 40 (expression_stmt)


state 80

   26 for_declaration: data_type . declaration_list ';'

    IDENTIFIER  shift, and go to state 6
    INCREMENT   shift, and go to state 7
    DECREMENT   shift, and go to state 8

    declaration_list  go to state 116
    sub_decl          go to state 34
    assignment_expr   go to state 35
    unary_expr        go to state 61
    lhs               go to state 37
    identifier        go to state 38
    array_access      go to state 39


state 81

   25 for_block: FOR '(' for_declaration . expression_stmt expression ')' stmt

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    ';'              shift, and go to state 79
    '('              shift, and go to state 52

    expression_stmt  go to state 117
    expression       go to state 83
    sub_expr         go to state 78
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 82

   27 for_declaration: expression_stmt .

    $default  reduce using rule 27 (for_declaration)


state 83

   39 expression_stmt: expression . ';'
   41 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 114
    ';'    shift, and go to state 118


state 84

   30 while_block: WHILE '(' expression . ')' stmt
   41 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 114
    ')'    shift, and go to state 119


state 85

   79 arithmetic_expr: identifier .

    $default  reduce using rule 79 (arithmetic_expr)


state 86

   72 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   73                | arithmetic_expr . MINUS arithmetic_expr
   74                | arithmetic_expr . STAR arithmetic_expr
   75                | arithmetic_expr . DIVISION arithmetic_expr
   76                | arithmetic_expr . MODULO arithmetic_expr
   78                | MINUS arithmetic_expr .

    $default  reduce using rule 78 (arithmetic_expr)


state 87

   43 sub_expr: sub_expr . GREATERTHAN sub_expr
   44         | sub_expr . LESSTHAN sub_expr
   45         | sub_expr . EQ sub_expr
   46         | sub_expr . NEQ sub_expr
   47         | sub_expr . GREATERTHANEQUAL sub_expr
   48         | sub_expr . LESSTHANEQUAL sub_expr
   49         | sub_expr . LOGICAL_AND sub_expr
   50         | sub_expr . OR sub_expr
   51         | EXCLAIMATION sub_expr .

    $default  reduce using rule 51 (sub_expr)


state 88

   72 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   73                | arithmetic_expr . MINUS arithmetic_expr
   74                | arithmetic_expr . STAR arithmetic_expr
   75                | arithmetic_expr . DIVISION arithmetic_expr
   76                | arithmetic_expr . MODULO arithmetic_expr
   77                | '(' arithmetic_expr . ')'

    STAR      shift, and go to state 98
    ADDITION  shift, and go to state 99
    MINUS     shift, and go to state 100
    DIVISION  shift, and go to state 101
    MODULO    shift, and go to state 102
    ')'       shift, and go to state 120


state 89

   50 sub_expr: sub_expr OR . sub_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    sub_expr         go to state 121
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 90

   48 sub_expr: sub_expr LESSTHANEQUAL . sub_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    sub_expr         go to state 122
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 91

   47 sub_expr: sub_expr GREATERTHANEQUAL . sub_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    sub_expr         go to state 123
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 92

   45 sub_expr: sub_expr EQ . sub_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    sub_expr         go to state 124
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 93

   46 sub_expr: sub_expr NEQ . sub_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    sub_expr         go to state 125
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 94

   44 sub_expr: sub_expr LESSTHAN . sub_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    sub_expr         go to state 126
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 95

   43 sub_expr: sub_expr GREATERTHAN . sub_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    sub_expr         go to state 127
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 96

   49 sub_expr: sub_expr LOGICAL_AND . sub_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    sub_expr         go to state 128
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 97

   24 single_stmt: RETURN sub_expr ';' .

    $default  reduce using rule 24 (single_stmt)


state 98

   74 arithmetic_expr: arithmetic_expr STAR . arithmetic_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    MINUS            shift, and go to state 49
    '('              shift, and go to state 52

    identifier       go to state 85
    arithmetic_expr  go to state 129
    constant         go to state 58


state 99

   72 arithmetic_expr: arithmetic_expr ADDITION . arithmetic_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    MINUS            shift, and go to state 49
    '('              shift, and go to state 52

    identifier       go to state 85
    arithmetic_expr  go to state 130
    constant         go to state 58


state 100

   73 arithmetic_expr: arithmetic_expr MINUS . arithmetic_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    MINUS            shift, and go to state 49
    '('              shift, and go to state 52

    identifier       go to state 85
    arithmetic_expr  go to state 131
    constant         go to state 58


state 101

   75 arithmetic_expr: arithmetic_expr DIVISION . arithmetic_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    MINUS            shift, and go to state 49
    '('              shift, and go to state 52

    identifier       go to state 85
    arithmetic_expr  go to state 132
    constant         go to state 58


state 102

   76 arithmetic_expr: arithmetic_expr MODULO . arithmetic_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    MINUS            shift, and go to state 49
    '('              shift, and go to state 52

    identifier       go to state 85
    arithmetic_expr  go to state 133
    constant         go to state 58


state 103

   31 declaration: data_type declaration_list ';' .

    $default  reduce using rule 31 (declaration)


state 104

   34 declaration_list: declaration_list COMMA sub_decl .

    $default  reduce using rule 34 (declaration_list)


state 105

   58 assignment_expr: unary_expr assign unary_expr .

    $default  reduce using rule 58 (assignment_expr)


state 106

   59 unary_expr: identifier . INCREMENT
   60           | identifier . DECREMENT

    INCREMENT  shift, and go to state 74
    DECREMENT  shift, and go to state 75


state 107

   57 assignment_expr: lhs assign unary_expr .

    $default  reduce using rule 57 (assignment_expr)


state 108

   59 unary_expr: identifier . INCREMENT
   60           | identifier . DECREMENT
   79 arithmetic_expr: identifier .
   82 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 74
    DECREMENT  shift, and go to state 75
    '['        shift, and go to state 76

    $default  reduce using rule 79 (arithmetic_expr)


state 109

   55 assignment_expr: lhs assign arithmetic_expr .
   72 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   73                | arithmetic_expr . MINUS arithmetic_expr
   74                | arithmetic_expr . STAR arithmetic_expr
   75                | arithmetic_expr . DIVISION arithmetic_expr
   76                | arithmetic_expr . MODULO arithmetic_expr

    STAR      shift, and go to state 98
    ADDITION  shift, and go to state 99
    MINUS     shift, and go to state 100
    DIVISION  shift, and go to state 101
    MODULO    shift, and go to state 102

    $default  reduce using rule 55 (assignment_expr)


state 110

   56 assignment_expr: lhs assign array_access .

    $default  reduce using rule 56 (assignment_expr)


state 111

   84 array_index: identifier .

    $default  reduce using rule 84 (array_index)


state 112

   83 array_index: constant .

    $default  reduce using rule 83 (array_index)


state 113

   82 array_access: identifier '[' array_index . ']'

    ']'  shift, and go to state 134


state 114

   41 expression: expression COMMA . sub_expr

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    sub_expr         go to state 135
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 115

   28 if_block: IF '(' expression ')' . stmt
   29         | IF '(' expression ')' . stmt ELSE stmt

    IDENTIFIER  shift, and go to state 6
    INCREMENT   shift, and go to state 7
    DECREMENT   shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    LONG_LONG   shift, and go to state 12
    SIGNED      shift, and go to state 13
    UNSIGNED    shift, and go to state 14
    CHAR        shift, and go to state 15
    BOOLEAN     shift, and go to state 16
    IF          shift, and go to state 17
    FOR         shift, and go to state 18
    WHILE       shift, and go to state 19
    CONTINUE    shift, and go to state 20
    BREAK       shift, and go to state 21
    RETURN      shift, and go to state 22
    '{'         shift, and go to state 1

    IDENTIFIER  [reduce using rule 4 (statements)]
    INCREMENT   [reduce using rule 4 (statements)]
    DECREMENT   [reduce using rule 4 (statements)]
    SHORT       [reduce using rule 4 (statements)]
    INT         [reduce using rule 4 (statements)]
    LONG        [reduce using rule 4 (statements)]
    LONG_LONG   [reduce using rule 4 (statements)]
    SIGNED      [reduce using rule 4 (statements)]
    UNSIGNED    [reduce using rule 4 (statements)]
    CHAR        [reduce using rule 4 (statements)]
    BOOLEAN     [reduce using rule 4 (statements)]
    IF          [reduce using rule 4 (statements)]
    FOR         [reduce using rule 4 (statements)]
    WHILE       [reduce using rule 4 (statements)]
    CONTINUE    [reduce using rule 4 (statements)]
    BREAK       [reduce using rule 4 (statements)]
    RETURN      [reduce using rule 4 (statements)]
    '{'         [reduce using rule 4 (statements)]
    $default    reduce using rule 4 (statements)

    compound_stmt     go to state 23
    statements        go to state 3
    stmt              go to state 136
    data_type         go to state 25
    sign_specifier    go to state 26
    type_specifier    go to state 27
    single_stmt       go to state 28
    for_block         go to state 29
    if_block          go to state 30
    while_block       go to state 31
    declaration       go to state 32
    declaration_list  go to state 33
    sub_decl          go to state 34
    assignment_expr   go to state 35
    unary_expr        go to state 36
    lhs               go to state 37
    identifier        go to state 38
    array_access      go to state 39


state 116

   26 for_declaration: data_type declaration_list . ';'
   34 declaration_list: declaration_list . COMMA sub_decl

    COMMA  shift, and go to state 63
    ';'    shift, and go to state 137


state 117

   25 for_block: FOR '(' for_declaration expression_stmt . expression ')' stmt

    IDENTIFIER       shift, and go to state 6
    INTEGER_LITERAL  shift, and go to state 48
    INCREMENT        shift, and go to state 7
    DECREMENT        shift, and go to state 8
    MINUS            shift, and go to state 49
    EXCLAIMATION     shift, and go to state 50
    '('              shift, and go to state 52

    expression       go to state 138
    sub_expr         go to state 78
    assignment_expr  go to state 54
    unary_expr       go to state 55
    lhs              go to state 37
    identifier       go to state 56
    arithmetic_expr  go to state 57
    constant         go to state 58
    array_access     go to state 59


state 118

   39 expression_stmt: expression ';' .

    $default  reduce using rule 39 (expression_stmt)


state 119

   30 while_block: WHILE '(' expression ')' . stmt

    IDENTIFIER  shift, and go to state 6
    INCREMENT   shift, and go to state 7
    DECREMENT   shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    LONG_LONG   shift, and go to state 12
    SIGNED      shift, and go to state 13
    UNSIGNED    shift, and go to state 14
    CHAR        shift, and go to state 15
    BOOLEAN     shift, and go to state 16
    IF          shift, and go to state 17
    FOR         shift, and go to state 18
    WHILE       shift, and go to state 19
    CONTINUE    shift, and go to state 20
    BREAK       shift, and go to state 21
    RETURN      shift, and go to state 22
    '{'         shift, and go to state 1

    IDENTIFIER  [reduce using rule 4 (statements)]
    INCREMENT   [reduce using rule 4 (statements)]
    DECREMENT   [reduce using rule 4 (statements)]
    SHORT       [reduce using rule 4 (statements)]
    INT         [reduce using rule 4 (statements)]
    LONG        [reduce using rule 4 (statements)]
    LONG_LONG   [reduce using rule 4 (statements)]
    SIGNED      [reduce using rule 4 (statements)]
    UNSIGNED    [reduce using rule 4 (statements)]
    CHAR        [reduce using rule 4 (statements)]
    BOOLEAN     [reduce using rule 4 (statements)]
    IF          [reduce using rule 4 (statements)]
    FOR         [reduce using rule 4 (statements)]
    WHILE       [reduce using rule 4 (statements)]
    CONTINUE    [reduce using rule 4 (statements)]
    BREAK       [reduce using rule 4 (statements)]
    RETURN      [reduce using rule 4 (statements)]
    '{'         [reduce using rule 4 (statements)]
    $default    reduce using rule 4 (statements)

    compound_stmt     go to state 23
    statements        go to state 3
    stmt              go to state 139
    data_type         go to state 25
    sign_specifier    go to state 26
    type_specifier    go to state 27
    single_stmt       go to state 28
    for_block         go to state 29
    if_block          go to state 30
    while_block       go to state 31
    declaration       go to state 32
    declaration_list  go to state 33
    sub_decl          go to state 34
    assignment_expr   go to state 35
    unary_expr        go to state 36
    lhs               go to state 37
    identifier        go to state 38
    array_access      go to state 39


state 120

   77 arithmetic_expr: '(' arithmetic_expr ')' .

    $default  reduce using rule 77 (arithmetic_expr)


state 121

   43 sub_expr: sub_expr . GREATERTHAN sub_expr
   44         | sub_expr . LESSTHAN sub_expr
   45         | sub_expr . EQ sub_expr
   46         | sub_expr . NEQ sub_expr
   47         | sub_expr . GREATERTHANEQUAL sub_expr
   48         | sub_expr . LESSTHANEQUAL sub_expr
   49         | sub_expr . LOGICAL_AND sub_expr
   50         | sub_expr . OR sub_expr
   50         | sub_expr OR sub_expr .

    LESSTHANEQUAL     shift, and go to state 90
    GREATERTHANEQUAL  shift, and go to state 91
    EQ                shift, and go to state 92
    NEQ               shift, and go to state 93
    LESSTHAN          shift, and go to state 94
    GREATERTHAN       shift, and go to state 95
    LOGICAL_AND       shift, and go to state 96

    $default  reduce using rule 50 (sub_expr)


state 122

   43 sub_expr: sub_expr . GREATERTHAN sub_expr
   44         | sub_expr . LESSTHAN sub_expr
   45         | sub_expr . EQ sub_expr
   46         | sub_expr . NEQ sub_expr
   47         | sub_expr . GREATERTHANEQUAL sub_expr
   48         | sub_expr . LESSTHANEQUAL sub_expr
   48         | sub_expr LESSTHANEQUAL sub_expr .
   49         | sub_expr . LOGICAL_AND sub_expr
   50         | sub_expr . OR sub_expr

    $default  reduce using rule 48 (sub_expr)


state 123

   43 sub_expr: sub_expr . GREATERTHAN sub_expr
   44         | sub_expr . LESSTHAN sub_expr
   45         | sub_expr . EQ sub_expr
   46         | sub_expr . NEQ sub_expr
   47         | sub_expr . GREATERTHANEQUAL sub_expr
   47         | sub_expr GREATERTHANEQUAL sub_expr .
   48         | sub_expr . LESSTHANEQUAL sub_expr
   49         | sub_expr . LOGICAL_AND sub_expr
   50         | sub_expr . OR sub_expr

    $default  reduce using rule 47 (sub_expr)


state 124

   43 sub_expr: sub_expr . GREATERTHAN sub_expr
   44         | sub_expr . LESSTHAN sub_expr
   45         | sub_expr . EQ sub_expr
   45         | sub_expr EQ sub_expr .
   46         | sub_expr . NEQ sub_expr
   47         | sub_expr . GREATERTHANEQUAL sub_expr
   48         | sub_expr . LESSTHANEQUAL sub_expr
   49         | sub_expr . LOGICAL_AND sub_expr
   50         | sub_expr . OR sub_expr

    LESSTHANEQUAL     shift, and go to state 90
    GREATERTHANEQUAL  shift, and go to state 91
    LESSTHAN          shift, and go to state 94
    GREATERTHAN       shift, and go to state 95

    $default  reduce using rule 45 (sub_expr)


state 125

   43 sub_expr: sub_expr . GREATERTHAN sub_expr
   44         | sub_expr . LESSTHAN sub_expr
   45         | sub_expr . EQ sub_expr
   46         | sub_expr . NEQ sub_expr
   46         | sub_expr NEQ sub_expr .
   47         | sub_expr . GREATERTHANEQUAL sub_expr
   48         | sub_expr . LESSTHANEQUAL sub_expr
   49         | sub_expr . LOGICAL_AND sub_expr
   50         | sub_expr . OR sub_expr

    LESSTHANEQUAL     shift, and go to state 90
    GREATERTHANEQUAL  shift, and go to state 91
    LESSTHAN          shift, and go to state 94
    GREATERTHAN       shift, and go to state 95

    $default  reduce using rule 46 (sub_expr)


state 126

   43 sub_expr: sub_expr . GREATERTHAN sub_expr
   44         | sub_expr . LESSTHAN sub_expr
   44         | sub_expr LESSTHAN sub_expr .
   45         | sub_expr . EQ sub_expr
   46         | sub_expr . NEQ sub_expr
   47         | sub_expr . GREATERTHANEQUAL sub_expr
   48         | sub_expr . LESSTHANEQUAL sub_expr
   49         | sub_expr . LOGICAL_AND sub_expr
   50         | sub_expr . OR sub_expr

    $default  reduce using rule 44 (sub_expr)


state 127

   43 sub_expr: sub_expr . GREATERTHAN sub_expr
   43         | sub_expr GREATERTHAN sub_expr .
   44         | sub_expr . LESSTHAN sub_expr
   45         | sub_expr . EQ sub_expr
   46         | sub_expr . NEQ sub_expr
   47         | sub_expr . GREATERTHANEQUAL sub_expr
   48         | sub_expr . LESSTHANEQUAL sub_expr
   49         | sub_expr . LOGICAL_AND sub_expr
   50         | sub_expr . OR sub_expr

    $default  reduce using rule 43 (sub_expr)


state 128

   43 sub_expr: sub_expr . GREATERTHAN sub_expr
   44         | sub_expr . LESSTHAN sub_expr
   45         | sub_expr . EQ sub_expr
   46         | sub_expr . NEQ sub_expr
   47         | sub_expr . GREATERTHANEQUAL sub_expr
   48         | sub_expr . LESSTHANEQUAL sub_expr
   49         | sub_expr . LOGICAL_AND sub_expr
   49         | sub_expr LOGICAL_AND sub_expr .
   50         | sub_expr . OR sub_expr

    LESSTHANEQUAL     shift, and go to state 90
    GREATERTHANEQUAL  shift, and go to state 91
    EQ                shift, and go to state 92
    NEQ               shift, and go to state 93
    LESSTHAN          shift, and go to state 94
    GREATERTHAN       shift, and go to state 95

    $default  reduce using rule 49 (sub_expr)


state 129

   72 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   73                | arithmetic_expr . MINUS arithmetic_expr
   74                | arithmetic_expr . STAR arithmetic_expr
   74                | arithmetic_expr STAR arithmetic_expr .
   75                | arithmetic_expr . DIVISION arithmetic_expr
   76                | arithmetic_expr . MODULO arithmetic_expr

    $default  reduce using rule 74 (arithmetic_expr)


state 130

   72 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   72                | arithmetic_expr ADDITION arithmetic_expr .
   73                | arithmetic_expr . MINUS arithmetic_expr
   74                | arithmetic_expr . STAR arithmetic_expr
   75                | arithmetic_expr . DIVISION arithmetic_expr
   76                | arithmetic_expr . MODULO arithmetic_expr

    STAR      shift, and go to state 98
    DIVISION  shift, and go to state 101
    MODULO    shift, and go to state 102

    $default  reduce using rule 72 (arithmetic_expr)


state 131

   72 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   73                | arithmetic_expr . MINUS arithmetic_expr
   73                | arithmetic_expr MINUS arithmetic_expr .
   74                | arithmetic_expr . STAR arithmetic_expr
   75                | arithmetic_expr . DIVISION arithmetic_expr
   76                | arithmetic_expr . MODULO arithmetic_expr

    STAR      shift, and go to state 98
    DIVISION  shift, and go to state 101
    MODULO    shift, and go to state 102

    $default  reduce using rule 73 (arithmetic_expr)


state 132

   72 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   73                | arithmetic_expr . MINUS arithmetic_expr
   74                | arithmetic_expr . STAR arithmetic_expr
   75                | arithmetic_expr . DIVISION arithmetic_expr
   75                | arithmetic_expr DIVISION arithmetic_expr .
   76                | arithmetic_expr . MODULO arithmetic_expr

    $default  reduce using rule 75 (arithmetic_expr)


state 133

   72 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   73                | arithmetic_expr . MINUS arithmetic_expr
   74                | arithmetic_expr . STAR arithmetic_expr
   75                | arithmetic_expr . DIVISION arithmetic_expr
   76                | arithmetic_expr . MODULO arithmetic_expr
   76                | arithmetic_expr MODULO arithmetic_expr .

    $default  reduce using rule 76 (arithmetic_expr)


state 134

   82 array_access: identifier '[' array_index ']' .

    $default  reduce using rule 82 (array_access)


state 135

   41 expression: expression COMMA sub_expr .
   43 sub_expr: sub_expr . GREATERTHAN sub_expr
   44         | sub_expr . LESSTHAN sub_expr
   45         | sub_expr . EQ sub_expr
   46         | sub_expr . NEQ sub_expr
   47         | sub_expr . GREATERTHANEQUAL sub_expr
   48         | sub_expr . LESSTHANEQUAL sub_expr
   49         | sub_expr . LOGICAL_AND sub_expr
   50         | sub_expr . OR sub_expr

    OR                shift, and go to state 89
    LESSTHANEQUAL     shift, and go to state 90
    GREATERTHANEQUAL  shift, and go to state 91
    EQ                shift, and go to state 92
    NEQ               shift, and go to state 93
    LESSTHAN          shift, and go to state 94
    GREATERTHAN       shift, and go to state 95
    LOGICAL_AND       shift, and go to state 96

    $default  reduce using rule 41 (expression)


state 136

   28 if_block: IF '(' expression ')' stmt .
   29         | IF '(' expression ')' stmt . ELSE stmt

    ELSE  shift, and go to state 140

    $default  reduce using rule 28 (if_block)


state 137

   26 for_declaration: data_type declaration_list ';' .

    $default  reduce using rule 26 (for_declaration)


state 138

   25 for_block: FOR '(' for_declaration expression_stmt expression . ')' stmt
   41 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 114
    ')'    shift, and go to state 141


state 139

   30 while_block: WHILE '(' expression ')' stmt .

    $default  reduce using rule 30 (while_block)


state 140

   29 if_block: IF '(' expression ')' stmt ELSE . stmt

    IDENTIFIER  shift, and go to state 6
    INCREMENT   shift, and go to state 7
    DECREMENT   shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    LONG_LONG   shift, and go to state 12
    SIGNED      shift, and go to state 13
    UNSIGNED    shift, and go to state 14
    CHAR        shift, and go to state 15
    BOOLEAN     shift, and go to state 16
    IF          shift, and go to state 17
    FOR         shift, and go to state 18
    WHILE       shift, and go to state 19
    CONTINUE    shift, and go to state 20
    BREAK       shift, and go to state 21
    RETURN      shift, and go to state 22
    '{'         shift, and go to state 1

    IDENTIFIER  [reduce using rule 4 (statements)]
    INCREMENT   [reduce using rule 4 (statements)]
    DECREMENT   [reduce using rule 4 (statements)]
    SHORT       [reduce using rule 4 (statements)]
    INT         [reduce using rule 4 (statements)]
    LONG        [reduce using rule 4 (statements)]
    LONG_LONG   [reduce using rule 4 (statements)]
    SIGNED      [reduce using rule 4 (statements)]
    UNSIGNED    [reduce using rule 4 (statements)]
    CHAR        [reduce using rule 4 (statements)]
    BOOLEAN     [reduce using rule 4 (statements)]
    IF          [reduce using rule 4 (statements)]
    FOR         [reduce using rule 4 (statements)]
    WHILE       [reduce using rule 4 (statements)]
    CONTINUE    [reduce using rule 4 (statements)]
    BREAK       [reduce using rule 4 (statements)]
    RETURN      [reduce using rule 4 (statements)]
    '{'         [reduce using rule 4 (statements)]
    $default    reduce using rule 4 (statements)

    compound_stmt     go to state 23
    statements        go to state 3
    stmt              go to state 142
    data_type         go to state 25
    sign_specifier    go to state 26
    type_specifier    go to state 27
    single_stmt       go to state 28
    for_block         go to state 29
    if_block          go to state 30
    while_block       go to state 31
    declaration       go to state 32
    declaration_list  go to state 33
    sub_decl          go to state 34
    assignment_expr   go to state 35
    unary_expr        go to state 36
    lhs               go to state 37
    identifier        go to state 38
    array_access      go to state 39


state 141

   25 for_block: FOR '(' for_declaration expression_stmt expression ')' . stmt

    IDENTIFIER  shift, and go to state 6
    INCREMENT   shift, and go to state 7
    DECREMENT   shift, and go to state 8
    SHORT       shift, and go to state 9
    INT         shift, and go to state 10
    LONG        shift, and go to state 11
    LONG_LONG   shift, and go to state 12
    SIGNED      shift, and go to state 13
    UNSIGNED    shift, and go to state 14
    CHAR        shift, and go to state 15
    BOOLEAN     shift, and go to state 16
    IF          shift, and go to state 17
    FOR         shift, and go to state 18
    WHILE       shift, and go to state 19
    CONTINUE    shift, and go to state 20
    BREAK       shift, and go to state 21
    RETURN      shift, and go to state 22
    '{'         shift, and go to state 1

    IDENTIFIER  [reduce using rule 4 (statements)]
    INCREMENT   [reduce using rule 4 (statements)]
    DECREMENT   [reduce using rule 4 (statements)]
    SHORT       [reduce using rule 4 (statements)]
    INT         [reduce using rule 4 (statements)]
    LONG        [reduce using rule 4 (statements)]
    LONG_LONG   [reduce using rule 4 (statements)]
    SIGNED      [reduce using rule 4 (statements)]
    UNSIGNED    [reduce using rule 4 (statements)]
    CHAR        [reduce using rule 4 (statements)]
    BOOLEAN     [reduce using rule 4 (statements)]
    IF          [reduce using rule 4 (statements)]
    FOR         [reduce using rule 4 (statements)]
    WHILE       [reduce using rule 4 (statements)]
    CONTINUE    [reduce using rule 4 (statements)]
    BREAK       [reduce using rule 4 (statements)]
    RETURN      [reduce using rule 4 (statements)]
    '{'         [reduce using rule 4 (statements)]
    $default    reduce using rule 4 (statements)

    compound_stmt     go to state 23
    statements        go to state 3
    stmt              go to state 143
    data_type         go to state 25
    sign_specifier    go to state 26
    type_specifier    go to state 27
    single_stmt       go to state 28
    for_block         go to state 29
    if_block          go to state 30
    while_block       go to state 31
    declaration       go to state 32
    declaration_list  go to state 33
    sub_decl          go to state 34
    assignment_expr   go to state 35
    unary_expr        go to state 36
    lhs               go to state 37
    identifier        go to state 38
    array_access      go to state 39


state 142

   29 if_block: IF '(' expression ')' stmt ELSE stmt .

    $default  reduce using rule 29 (if_block)


state 143

   25 for_block: FOR '(' for_declaration expression_stmt expression ')' stmt .

    $default  reduce using rule 25 (for_block)
