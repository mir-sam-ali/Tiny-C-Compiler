Useless nonterminals

   statements
   compound_stmt
   @1


Terminals which are not used

   STRING_LITERAL
   AMPERSAND
   CONST
   VOID
   CASE
   DEFAULT
   DO
   SWITCH
   NEGATION
   SHIFTLEFT
   SHIFTRIGHT
   BITXOR
   BITOR
   QUESTION
   SHIFTLEQ
   SHIFTREQ
   BITANDEQ
   BITXOREQ
   BITOREQ
   HASH
   PRINTF
   SCANF
   GETS
   PUTS
   SIZEOF
   LOOP
   SUM
   MAX
   MIN
   FULL_STOP
   OPEN_SQUARE
   CLOSE_SQUARE
   COLON
   '{'
   '}'


Useless rules

   88 stmt: compound_stmt

   89 statements: statements stmt

   90 @1: /* empty */

   91 compound_stmt: '{' @1 statements '}'


Rules never reduced

   78 arithmetic_expr: array_access

   84 array_index: constant
   85            | identifier


State 55 conflicts: 16 reduce/reduce
State 84 conflicts: 17 reduce/reduce
State 108 conflicts: 16 reduce/reduce
State 110 conflicts: 1 reduce/reduce
State 112 conflicts: 1 reduce/reduce
State 118 conflicts: 2 reduce/reduce
State 119 conflicts: 2 reduce/reduce
State 120 conflicts: 15 reduce/reduce


Grammar

    0 $accept: stmt $end

    1 stmt: single_stmt

    2 data_type: sign_specifier type_specifier
    3          | type_specifier

    4 sign_specifier: SIGNED
    5               | UNSIGNED

    6 type_specifier: INT
    7               | SHORT
    8               | LONG
    9               | LONG_LONG
   10               | CHAR
   11               | BOOLEAN

   12 single_stmt: if_block
   13            | for_block
   14            | while_block
   15            | declaration
   16            | RETURN ';'
   17            | CONTINUE ';'
   18            | BREAK ';'
   19            | RETURN sub_expr ';'

   20 for_block: FOR '(' for_declaration expression_stmt expression ')' stmt

   21 for_declaration: data_type declaration_list ';'
   22                | expression_stmt

   23 if_block: IF '(' expression ')' stmt
   24         | IF '(' expression ')' stmt ELSE stmt

   25 while_block: WHILE '(' expression ')' stmt

   26 declaration: data_type declaration_list ';'
   27            | declaration_list ';'
   28            | unary_expr ';'

   29 declaration_list: declaration_list COMMA sub_decl
   30                 | sub_decl

   31 sub_decl: assignment_expr
   32         | identifier
   33         | array_access

   34 expression_stmt: data_type expression ';'
   35                | expression ';'
   36                | ';'

   37 expression: expression COMMA sub_expr
   38           | sub_expr

   39 sub_expr: sub_expr GREATERTHAN sub_expr
   40         | sub_expr LESSTHAN sub_expr
   41         | sub_expr EQ sub_expr
   42         | sub_expr NEQ sub_expr
   43         | sub_expr GREATERTHANEQUAL sub_expr
   44         | sub_expr LESSTHANEQUAL sub_expr
   45         | sub_expr AND sub_expr
   46         | sub_expr OR sub_expr
   47         | EXCLAIMATION sub_expr
   48         | arithmetic_expr
   49         | assignment_expr
   50         | unary_expr

   51 assignment_expr: lhs assign arithmetic_expr
   52                | lhs assign array_access
   53                | lhs assign unary_expr
   54                | unary_expr assign unary_expr

   55 unary_expr: identifier INCREMENT
   56           | identifier DECREMENT
   57           | DECREMENT identifier
   58           | INCREMENT identifier

   59 lhs: identifier
   60    | array_access

   61 identifier: IDENTIFIER

   62 assign: ASSIGN
   63       | PLUSEQ
   64       | MINUSEQ
   65       | MULEQ
   66       | DIVEQ
   67       | MODEQ

   68 arithmetic_expr: arithmetic_expr ADDITION arithmetic_expr
   69                | arithmetic_expr MINUS arithmetic_expr
   70                | arithmetic_expr STAR arithmetic_expr
   71                | arithmetic_expr DIVISION arithmetic_expr
   72                | arithmetic_expr MODULO arithmetic_expr
   73                | '(' arithmetic_expr ')'
   74                | MINUS arithmetic_expr
   75                | identifier
   76                | array_access
   77                | constant
   78                | array_access

   79 constant: INTEGER_LITERAL
   80         | CHAR_LITERAL
   81         | TRUE
   82         | FALSE

   83 array_access: identifier '[' array_index ']'

   84 array_index: constant
   85            | identifier
   86            | arithmetic_expr
   87            | unary_expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 20 23 24 25 73
')' (41) 20 23 24 25 73
';' (59) 16 17 18 19 21 26 27 28 34 35 36
'[' (91) 83
']' (93) 83
'{' (123)
'}' (125)
error (256)
IDENTIFIER (258) 61
INTEGER_LITERAL (259) 79
STRING_LITERAL (260)
CHAR_LITERAL (261) 80
AND (262) 45
OR (263) 46
LESSTHANEQUAL (264) 44
GREATERTHANEQUAL (265) 43
EQ (266) 41
NEQ (267) 42
AMPERSAND (268)
MULEQ (269) 65
DIVEQ (270) 66
MODEQ (271) 67
PLUSEQ (272) 63
MINUSEQ (273) 64
INCREMENT (274) 55 58
DECREMENT (275) 56 57
SHORT (276) 7
INT (277) 6
LONG (278) 8
LONG_LONG (279) 9
SIGNED (280) 4
UNSIGNED (281) 5
CONST (282)
CHAR (283) 10
BOOLEAN (284) 11
VOID (285)
IF (286) 23 24
FOR (287) 20
WHILE (288) 25
CONTINUE (289) 17
BREAK (290) 18
RETURN (291) 16 19
CASE (292)
DEFAULT (293)
DO (294)
ELSE (295) 24
SWITCH (296)
STAR (297) 70
ADDITION (298) 68
MINUS (299) 69 74
NEGATION (300)
EXCLAIMATION (301) 47
DIVISION (302) 71
MODULO (303) 72
SHIFTLEFT (304)
SHIFTRIGHT (305)
LESSTHAN (306) 40
GREATERTHAN (307) 39
BITXOR (308)
BITOR (309)
QUESTION (310)
ASSIGN (311) 62
SHIFTLEQ (312)
SHIFTREQ (313)
BITANDEQ (314)
BITXOREQ (315)
BITOREQ (316)
HASH (317)
TRUE (318) 81
FALSE (319) 82
PRINTF (320)
SCANF (321)
GETS (322)
PUTS (323)
SIZEOF (324)
LOOP (325)
SUM (326)
MAX (327)
MIN (328)
COMMA (329) 29 37
FULL_STOP (330)
OPEN_SQUARE (331)
CLOSE_SQUARE (332)
COLON (333)
UMINUS (334)
LOWER_THAN_ELSE (335)


Nonterminals, with rules where they appear

$accept (88)
    on left: 0
stmt (89)
    on left: 1, on right: 0 20 23 24 25
data_type (90)
    on left: 2 3, on right: 21 26 34
sign_specifier (91)
    on left: 4 5, on right: 2
type_specifier (92)
    on left: 6 7 8 9 10 11, on right: 2 3
single_stmt (93)
    on left: 12 13 14 15 16 17 18 19, on right: 1
for_block (94)
    on left: 20, on right: 13
for_declaration (95)
    on left: 21 22, on right: 20
if_block (96)
    on left: 23 24, on right: 12
while_block (97)
    on left: 25, on right: 14
declaration (98)
    on left: 26 27 28, on right: 15
declaration_list (99)
    on left: 29 30, on right: 21 26 27 29
sub_decl (100)
    on left: 31 32 33, on right: 29 30
expression_stmt (101)
    on left: 34 35 36, on right: 20 22
expression (102)
    on left: 37 38, on right: 20 23 24 25 34 35 37
sub_expr (103)
    on left: 39 40 41 42 43 44 45 46 47 48 49 50, on right: 19 37 38
    39 40 41 42 43 44 45 46 47
assignment_expr (104)
    on left: 51 52 53 54, on right: 31 49
unary_expr (105)
    on left: 55 56 57 58, on right: 28 50 53 54 87
lhs (106)
    on left: 59 60, on right: 51 52 53
identifier (107)
    on left: 61, on right: 32 55 56 57 58 59 75 83 85
assign (108)
    on left: 62 63 64 65 66 67, on right: 51 52 53 54
arithmetic_expr (109)
    on left: 68 69 70 71 72 73 74 75 76 77 78, on right: 48 51 68 69
    70 71 72 73 74 86
constant (110)
    on left: 79 80 81 82, on right: 77 84
array_access (111)
    on left: 83, on right: 33 52 60 76 78
array_index (112)
    on left: 84 85 86 87, on right: 83


state 0

    0 $accept: . stmt $end

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    CHAR        shift, and go to state 10
    BOOLEAN     shift, and go to state 11
    IF          shift, and go to state 12
    FOR         shift, and go to state 13
    WHILE       shift, and go to state 14
    CONTINUE    shift, and go to state 15
    BREAK       shift, and go to state 16
    RETURN      shift, and go to state 17

    stmt              go to state 18
    data_type         go to state 19
    sign_specifier    go to state 20
    type_specifier    go to state 21
    single_stmt       go to state 22
    for_block         go to state 23
    if_block          go to state 24
    while_block       go to state 25
    declaration       go to state 26
    declaration_list  go to state 27
    sub_decl          go to state 28
    assignment_expr   go to state 29
    unary_expr        go to state 30
    lhs               go to state 31
    identifier        go to state 32
    array_access      go to state 33


state 1

   61 identifier: IDENTIFIER .

    $default  reduce using rule 61 (identifier)


state 2

   58 unary_expr: INCREMENT . identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 34


state 3

   57 unary_expr: DECREMENT . identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 35


state 4

    7 type_specifier: SHORT .

    $default  reduce using rule 7 (type_specifier)


state 5

    6 type_specifier: INT .

    $default  reduce using rule 6 (type_specifier)


state 6

    8 type_specifier: LONG .

    $default  reduce using rule 8 (type_specifier)


state 7

    9 type_specifier: LONG_LONG .

    $default  reduce using rule 9 (type_specifier)


state 8

    4 sign_specifier: SIGNED .

    $default  reduce using rule 4 (sign_specifier)


state 9

    5 sign_specifier: UNSIGNED .

    $default  reduce using rule 5 (sign_specifier)


state 10

   10 type_specifier: CHAR .

    $default  reduce using rule 10 (type_specifier)


state 11

   11 type_specifier: BOOLEAN .

    $default  reduce using rule 11 (type_specifier)


state 12

   23 if_block: IF . '(' expression ')' stmt
   24         | IF . '(' expression ')' stmt ELSE stmt

    '('  shift, and go to state 36


state 13

   20 for_block: FOR . '(' for_declaration expression_stmt expression ')' stmt

    '('  shift, and go to state 37


state 14

   25 while_block: WHILE . '(' expression ')' stmt

    '('  shift, and go to state 38


state 15

   17 single_stmt: CONTINUE . ';'

    ';'  shift, and go to state 39


state 16

   18 single_stmt: BREAK . ';'

    ';'  shift, and go to state 40


state 17

   16 single_stmt: RETURN . ';'
   19            | RETURN . sub_expr ';'

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    ';'              shift, and go to state 47
    '('              shift, and go to state 48

    sub_expr         go to state 49
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 18

    0 $accept: stmt . $end

    $end  shift, and go to state 56


state 19

   26 declaration: data_type . declaration_list ';'

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    declaration_list  go to state 57
    sub_decl          go to state 28
    assignment_expr   go to state 29
    unary_expr        go to state 58
    lhs               go to state 31
    identifier        go to state 32
    array_access      go to state 33


state 20

    2 data_type: sign_specifier . type_specifier

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    CHAR       shift, and go to state 10
    BOOLEAN    shift, and go to state 11

    type_specifier  go to state 59


state 21

    3 data_type: type_specifier .

    $default  reduce using rule 3 (data_type)


state 22

    1 stmt: single_stmt .

    $default  reduce using rule 1 (stmt)


state 23

   13 single_stmt: for_block .

    $default  reduce using rule 13 (single_stmt)


state 24

   12 single_stmt: if_block .

    $default  reduce using rule 12 (single_stmt)


state 25

   14 single_stmt: while_block .

    $default  reduce using rule 14 (single_stmt)


state 26

   15 single_stmt: declaration .

    $default  reduce using rule 15 (single_stmt)


state 27

   27 declaration: declaration_list . ';'
   29 declaration_list: declaration_list . COMMA sub_decl

    COMMA  shift, and go to state 60
    ';'    shift, and go to state 61


state 28

   30 declaration_list: sub_decl .

    $default  reduce using rule 30 (declaration_list)


state 29

   31 sub_decl: assignment_expr .

    $default  reduce using rule 31 (sub_decl)


state 30

   28 declaration: unary_expr . ';'
   54 assignment_expr: unary_expr . assign unary_expr

    MULEQ    shift, and go to state 62
    DIVEQ    shift, and go to state 63
    MODEQ    shift, and go to state 64
    PLUSEQ   shift, and go to state 65
    MINUSEQ  shift, and go to state 66
    ASSIGN   shift, and go to state 67
    ';'      shift, and go to state 68

    assign  go to state 69


state 31

   51 assignment_expr: lhs . assign arithmetic_expr
   52                | lhs . assign array_access
   53                | lhs . assign unary_expr

    MULEQ    shift, and go to state 62
    DIVEQ    shift, and go to state 63
    MODEQ    shift, and go to state 64
    PLUSEQ   shift, and go to state 65
    MINUSEQ  shift, and go to state 66
    ASSIGN   shift, and go to state 67

    assign  go to state 70


state 32

   32 sub_decl: identifier .
   55 unary_expr: identifier . INCREMENT
   56           | identifier . DECREMENT
   59 lhs: identifier .
   83 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 71
    DECREMENT  shift, and go to state 72
    '['        shift, and go to state 73

    COMMA     reduce using rule 32 (sub_decl)
    ';'       reduce using rule 32 (sub_decl)
    $default  reduce using rule 59 (lhs)


state 33

   33 sub_decl: array_access .
   60 lhs: array_access .

    COMMA     reduce using rule 33 (sub_decl)
    ';'       reduce using rule 33 (sub_decl)
    $default  reduce using rule 60 (lhs)


state 34

   58 unary_expr: INCREMENT identifier .

    $default  reduce using rule 58 (unary_expr)


state 35

   57 unary_expr: DECREMENT identifier .

    $default  reduce using rule 57 (unary_expr)


state 36

   23 if_block: IF '(' . expression ')' stmt
   24         | IF '(' . expression ')' stmt ELSE stmt

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    expression       go to state 74
    sub_expr         go to state 75
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 37

   20 for_block: FOR '(' . for_declaration expression_stmt expression ')' stmt

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    SHORT            shift, and go to state 4
    INT              shift, and go to state 5
    LONG             shift, and go to state 6
    LONG_LONG        shift, and go to state 7
    SIGNED           shift, and go to state 8
    UNSIGNED         shift, and go to state 9
    CHAR             shift, and go to state 10
    BOOLEAN          shift, and go to state 11
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    ';'              shift, and go to state 76
    '('              shift, and go to state 48

    data_type        go to state 77
    sign_specifier   go to state 20
    type_specifier   go to state 21
    for_declaration  go to state 78
    expression_stmt  go to state 79
    expression       go to state 80
    sub_expr         go to state 75
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 38

   25 while_block: WHILE '(' . expression ')' stmt

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    expression       go to state 81
    sub_expr         go to state 75
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 39

   17 single_stmt: CONTINUE ';' .

    $default  reduce using rule 17 (single_stmt)


state 40

   18 single_stmt: BREAK ';' .

    $default  reduce using rule 18 (single_stmt)


state 41

   79 constant: INTEGER_LITERAL .

    $default  reduce using rule 79 (constant)


state 42

   80 constant: CHAR_LITERAL .

    $default  reduce using rule 80 (constant)


state 43

   74 arithmetic_expr: MINUS . arithmetic_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    MINUS            shift, and go to state 43
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    identifier       go to state 82
    arithmetic_expr  go to state 83
    constant         go to state 54
    array_access     go to state 84


state 44

   47 sub_expr: EXCLAIMATION . sub_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    sub_expr         go to state 85
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 45

   81 constant: TRUE .

    $default  reduce using rule 81 (constant)


state 46

   82 constant: FALSE .

    $default  reduce using rule 82 (constant)


state 47

   16 single_stmt: RETURN ';' .

    $default  reduce using rule 16 (single_stmt)


state 48

   73 arithmetic_expr: '(' . arithmetic_expr ')'

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    MINUS            shift, and go to state 43
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    identifier       go to state 82
    arithmetic_expr  go to state 86
    constant         go to state 54
    array_access     go to state 84


state 49

   19 single_stmt: RETURN sub_expr . ';'
   39 sub_expr: sub_expr . GREATERTHAN sub_expr
   40         | sub_expr . LESSTHAN sub_expr
   41         | sub_expr . EQ sub_expr
   42         | sub_expr . NEQ sub_expr
   43         | sub_expr . GREATERTHANEQUAL sub_expr
   44         | sub_expr . LESSTHANEQUAL sub_expr
   45         | sub_expr . AND sub_expr
   46         | sub_expr . OR sub_expr

    AND               shift, and go to state 87
    OR                shift, and go to state 88
    LESSTHANEQUAL     shift, and go to state 89
    GREATERTHANEQUAL  shift, and go to state 90
    EQ                shift, and go to state 91
    NEQ               shift, and go to state 92
    LESSTHAN          shift, and go to state 93
    GREATERTHAN       shift, and go to state 94
    ';'               shift, and go to state 95


state 50

   49 sub_expr: assignment_expr .

    $default  reduce using rule 49 (sub_expr)


state 51

   50 sub_expr: unary_expr .
   54 assignment_expr: unary_expr . assign unary_expr

    MULEQ    shift, and go to state 62
    DIVEQ    shift, and go to state 63
    MODEQ    shift, and go to state 64
    PLUSEQ   shift, and go to state 65
    MINUSEQ  shift, and go to state 66
    ASSIGN   shift, and go to state 67

    $default  reduce using rule 50 (sub_expr)

    assign  go to state 69


state 52

   55 unary_expr: identifier . INCREMENT
   56           | identifier . DECREMENT
   59 lhs: identifier .
   75 arithmetic_expr: identifier .
   83 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 71
    DECREMENT  shift, and go to state 72
    '['        shift, and go to state 73

    MULEQ     reduce using rule 59 (lhs)
    DIVEQ     reduce using rule 59 (lhs)
    MODEQ     reduce using rule 59 (lhs)
    PLUSEQ    reduce using rule 59 (lhs)
    MINUSEQ   reduce using rule 59 (lhs)
    ASSIGN    reduce using rule 59 (lhs)
    $default  reduce using rule 75 (arithmetic_expr)


state 53

   48 sub_expr: arithmetic_expr .
   68 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   69                | arithmetic_expr . MINUS arithmetic_expr
   70                | arithmetic_expr . STAR arithmetic_expr
   71                | arithmetic_expr . DIVISION arithmetic_expr
   72                | arithmetic_expr . MODULO arithmetic_expr

    STAR      shift, and go to state 96
    ADDITION  shift, and go to state 97
    MINUS     shift, and go to state 98
    DIVISION  shift, and go to state 99
    MODULO    shift, and go to state 100

    $default  reduce using rule 48 (sub_expr)


state 54

   77 arithmetic_expr: constant .

    $default  reduce using rule 77 (arithmetic_expr)


state 55

   60 lhs: array_access .
   76 arithmetic_expr: array_access .
   78                | array_access .

    AND               reduce using rule 76 (arithmetic_expr)
    AND               [reduce using rule 78 (arithmetic_expr)]
    OR                reduce using rule 76 (arithmetic_expr)
    OR                [reduce using rule 78 (arithmetic_expr)]
    LESSTHANEQUAL     reduce using rule 76 (arithmetic_expr)
    LESSTHANEQUAL     [reduce using rule 78 (arithmetic_expr)]
    GREATERTHANEQUAL  reduce using rule 76 (arithmetic_expr)
    GREATERTHANEQUAL  [reduce using rule 78 (arithmetic_expr)]
    EQ                reduce using rule 76 (arithmetic_expr)
    EQ                [reduce using rule 78 (arithmetic_expr)]
    NEQ               reduce using rule 76 (arithmetic_expr)
    NEQ               [reduce using rule 78 (arithmetic_expr)]
    MULEQ             reduce using rule 60 (lhs)
    DIVEQ             reduce using rule 60 (lhs)
    MODEQ             reduce using rule 60 (lhs)
    PLUSEQ            reduce using rule 60 (lhs)
    MINUSEQ           reduce using rule 60 (lhs)
    STAR              reduce using rule 76 (arithmetic_expr)
    STAR              [reduce using rule 78 (arithmetic_expr)]
    ADDITION          reduce using rule 76 (arithmetic_expr)
    ADDITION          [reduce using rule 78 (arithmetic_expr)]
    MINUS             reduce using rule 76 (arithmetic_expr)
    MINUS             [reduce using rule 78 (arithmetic_expr)]
    DIVISION          reduce using rule 76 (arithmetic_expr)
    DIVISION          [reduce using rule 78 (arithmetic_expr)]
    MODULO            reduce using rule 76 (arithmetic_expr)
    MODULO            [reduce using rule 78 (arithmetic_expr)]
    LESSTHAN          reduce using rule 76 (arithmetic_expr)
    LESSTHAN          [reduce using rule 78 (arithmetic_expr)]
    GREATERTHAN       reduce using rule 76 (arithmetic_expr)
    GREATERTHAN       [reduce using rule 78 (arithmetic_expr)]
    ASSIGN            reduce using rule 60 (lhs)
    COMMA             reduce using rule 76 (arithmetic_expr)
    COMMA             [reduce using rule 78 (arithmetic_expr)]
    ';'               reduce using rule 76 (arithmetic_expr)
    ';'               [reduce using rule 78 (arithmetic_expr)]
    ')'               reduce using rule 76 (arithmetic_expr)
    ')'               [reduce using rule 78 (arithmetic_expr)]
    $default          reduce using rule 76 (arithmetic_expr)


state 56

    0 $accept: stmt $end .

    $default  accept


state 57

   26 declaration: data_type declaration_list . ';'
   29 declaration_list: declaration_list . COMMA sub_decl

    COMMA  shift, and go to state 60
    ';'    shift, and go to state 101


state 58

   54 assignment_expr: unary_expr . assign unary_expr

    MULEQ    shift, and go to state 62
    DIVEQ    shift, and go to state 63
    MODEQ    shift, and go to state 64
    PLUSEQ   shift, and go to state 65
    MINUSEQ  shift, and go to state 66
    ASSIGN   shift, and go to state 67

    assign  go to state 69


state 59

    2 data_type: sign_specifier type_specifier .

    $default  reduce using rule 2 (data_type)


state 60

   29 declaration_list: declaration_list COMMA . sub_decl

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    sub_decl         go to state 102
    assignment_expr  go to state 29
    unary_expr       go to state 58
    lhs              go to state 31
    identifier       go to state 32
    array_access     go to state 33


state 61

   27 declaration: declaration_list ';' .

    $default  reduce using rule 27 (declaration)


state 62

   65 assign: MULEQ .

    $default  reduce using rule 65 (assign)


state 63

   66 assign: DIVEQ .

    $default  reduce using rule 66 (assign)


state 64

   67 assign: MODEQ .

    $default  reduce using rule 67 (assign)


state 65

   63 assign: PLUSEQ .

    $default  reduce using rule 63 (assign)


state 66

   64 assign: MINUSEQ .

    $default  reduce using rule 64 (assign)


state 67

   62 assign: ASSIGN .

    $default  reduce using rule 62 (assign)


state 68

   28 declaration: unary_expr ';' .

    $default  reduce using rule 28 (declaration)


state 69

   54 assignment_expr: unary_expr assign . unary_expr

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    unary_expr  go to state 103
    identifier  go to state 104


state 70

   51 assignment_expr: lhs assign . arithmetic_expr
   52                | lhs assign . array_access
   53                | lhs assign . unary_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    unary_expr       go to state 105
    identifier       go to state 106
    arithmetic_expr  go to state 107
    constant         go to state 54
    array_access     go to state 108


state 71

   55 unary_expr: identifier INCREMENT .

    $default  reduce using rule 55 (unary_expr)


state 72

   56 unary_expr: identifier DECREMENT .

    $default  reduce using rule 56 (unary_expr)


state 73

   83 array_access: identifier '[' . array_index ']'

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    unary_expr       go to state 109
    identifier       go to state 110
    arithmetic_expr  go to state 111
    constant         go to state 112
    array_access     go to state 84
    array_index      go to state 113


state 74

   23 if_block: IF '(' expression . ')' stmt
   24         | IF '(' expression . ')' stmt ELSE stmt
   37 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 114
    ')'    shift, and go to state 115


state 75

   38 expression: sub_expr .
   39 sub_expr: sub_expr . GREATERTHAN sub_expr
   40         | sub_expr . LESSTHAN sub_expr
   41         | sub_expr . EQ sub_expr
   42         | sub_expr . NEQ sub_expr
   43         | sub_expr . GREATERTHANEQUAL sub_expr
   44         | sub_expr . LESSTHANEQUAL sub_expr
   45         | sub_expr . AND sub_expr
   46         | sub_expr . OR sub_expr

    AND               shift, and go to state 87
    OR                shift, and go to state 88
    LESSTHANEQUAL     shift, and go to state 89
    GREATERTHANEQUAL  shift, and go to state 90
    EQ                shift, and go to state 91
    NEQ               shift, and go to state 92
    LESSTHAN          shift, and go to state 93
    GREATERTHAN       shift, and go to state 94

    $default  reduce using rule 38 (expression)


state 76

   36 expression_stmt: ';' .

    $default  reduce using rule 36 (expression_stmt)


state 77

   21 for_declaration: data_type . declaration_list ';'
   34 expression_stmt: data_type . expression ';'

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    declaration_list  go to state 116
    sub_decl          go to state 28
    expression        go to state 117
    sub_expr          go to state 75
    assignment_expr   go to state 118
    unary_expr        go to state 51
    lhs               go to state 31
    identifier        go to state 119
    arithmetic_expr   go to state 53
    constant          go to state 54
    array_access      go to state 120


state 78

   20 for_block: FOR '(' for_declaration . expression_stmt expression ')' stmt

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    SHORT            shift, and go to state 4
    INT              shift, and go to state 5
    LONG             shift, and go to state 6
    LONG_LONG        shift, and go to state 7
    SIGNED           shift, and go to state 8
    UNSIGNED         shift, and go to state 9
    CHAR             shift, and go to state 10
    BOOLEAN          shift, and go to state 11
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    ';'              shift, and go to state 76
    '('              shift, and go to state 48

    data_type        go to state 121
    sign_specifier   go to state 20
    type_specifier   go to state 21
    expression_stmt  go to state 122
    expression       go to state 80
    sub_expr         go to state 75
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 79

   22 for_declaration: expression_stmt .

    $default  reduce using rule 22 (for_declaration)


state 80

   35 expression_stmt: expression . ';'
   37 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 114
    ';'    shift, and go to state 123


state 81

   25 while_block: WHILE '(' expression . ')' stmt
   37 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 114
    ')'    shift, and go to state 124


state 82

   75 arithmetic_expr: identifier .
   83 array_access: identifier . '[' array_index ']'

    '['  shift, and go to state 73

    $default  reduce using rule 75 (arithmetic_expr)


state 83

   68 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   69                | arithmetic_expr . MINUS arithmetic_expr
   70                | arithmetic_expr . STAR arithmetic_expr
   71                | arithmetic_expr . DIVISION arithmetic_expr
   72                | arithmetic_expr . MODULO arithmetic_expr
   74                | MINUS arithmetic_expr .

    $default  reduce using rule 74 (arithmetic_expr)


state 84

   76 arithmetic_expr: array_access .
   78                | array_access .

    AND               reduce using rule 76 (arithmetic_expr)
    AND               [reduce using rule 78 (arithmetic_expr)]
    OR                reduce using rule 76 (arithmetic_expr)
    OR                [reduce using rule 78 (arithmetic_expr)]
    LESSTHANEQUAL     reduce using rule 76 (arithmetic_expr)
    LESSTHANEQUAL     [reduce using rule 78 (arithmetic_expr)]
    GREATERTHANEQUAL  reduce using rule 76 (arithmetic_expr)
    GREATERTHANEQUAL  [reduce using rule 78 (arithmetic_expr)]
    EQ                reduce using rule 76 (arithmetic_expr)
    EQ                [reduce using rule 78 (arithmetic_expr)]
    NEQ               reduce using rule 76 (arithmetic_expr)
    NEQ               [reduce using rule 78 (arithmetic_expr)]
    STAR              reduce using rule 76 (arithmetic_expr)
    STAR              [reduce using rule 78 (arithmetic_expr)]
    ADDITION          reduce using rule 76 (arithmetic_expr)
    ADDITION          [reduce using rule 78 (arithmetic_expr)]
    MINUS             reduce using rule 76 (arithmetic_expr)
    MINUS             [reduce using rule 78 (arithmetic_expr)]
    DIVISION          reduce using rule 76 (arithmetic_expr)
    DIVISION          [reduce using rule 78 (arithmetic_expr)]
    MODULO            reduce using rule 76 (arithmetic_expr)
    MODULO            [reduce using rule 78 (arithmetic_expr)]
    LESSTHAN          reduce using rule 76 (arithmetic_expr)
    LESSTHAN          [reduce using rule 78 (arithmetic_expr)]
    GREATERTHAN       reduce using rule 76 (arithmetic_expr)
    GREATERTHAN       [reduce using rule 78 (arithmetic_expr)]
    COMMA             reduce using rule 76 (arithmetic_expr)
    COMMA             [reduce using rule 78 (arithmetic_expr)]
    ';'               reduce using rule 76 (arithmetic_expr)
    ';'               [reduce using rule 78 (arithmetic_expr)]
    ')'               reduce using rule 76 (arithmetic_expr)
    ')'               [reduce using rule 78 (arithmetic_expr)]
    ']'               reduce using rule 76 (arithmetic_expr)
    ']'               [reduce using rule 78 (arithmetic_expr)]
    $default          reduce using rule 76 (arithmetic_expr)


state 85

   39 sub_expr: sub_expr . GREATERTHAN sub_expr
   40         | sub_expr . LESSTHAN sub_expr
   41         | sub_expr . EQ sub_expr
   42         | sub_expr . NEQ sub_expr
   43         | sub_expr . GREATERTHANEQUAL sub_expr
   44         | sub_expr . LESSTHANEQUAL sub_expr
   45         | sub_expr . AND sub_expr
   46         | sub_expr . OR sub_expr
   47         | EXCLAIMATION sub_expr .

    $default  reduce using rule 47 (sub_expr)


state 86

   68 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   69                | arithmetic_expr . MINUS arithmetic_expr
   70                | arithmetic_expr . STAR arithmetic_expr
   71                | arithmetic_expr . DIVISION arithmetic_expr
   72                | arithmetic_expr . MODULO arithmetic_expr
   73                | '(' arithmetic_expr . ')'

    STAR      shift, and go to state 96
    ADDITION  shift, and go to state 97
    MINUS     shift, and go to state 98
    DIVISION  shift, and go to state 99
    MODULO    shift, and go to state 100
    ')'       shift, and go to state 125


state 87

   45 sub_expr: sub_expr AND . sub_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    sub_expr         go to state 126
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 88

   46 sub_expr: sub_expr OR . sub_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    sub_expr         go to state 127
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 89

   44 sub_expr: sub_expr LESSTHANEQUAL . sub_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    sub_expr         go to state 128
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 90

   43 sub_expr: sub_expr GREATERTHANEQUAL . sub_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    sub_expr         go to state 129
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 91

   41 sub_expr: sub_expr EQ . sub_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    sub_expr         go to state 130
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 92

   42 sub_expr: sub_expr NEQ . sub_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    sub_expr         go to state 131
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 93

   40 sub_expr: sub_expr LESSTHAN . sub_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    sub_expr         go to state 132
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 94

   39 sub_expr: sub_expr GREATERTHAN . sub_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    sub_expr         go to state 133
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 95

   19 single_stmt: RETURN sub_expr ';' .

    $default  reduce using rule 19 (single_stmt)


state 96

   70 arithmetic_expr: arithmetic_expr STAR . arithmetic_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    MINUS            shift, and go to state 43
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    identifier       go to state 82
    arithmetic_expr  go to state 134
    constant         go to state 54
    array_access     go to state 84


state 97

   68 arithmetic_expr: arithmetic_expr ADDITION . arithmetic_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    MINUS            shift, and go to state 43
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    identifier       go to state 82
    arithmetic_expr  go to state 135
    constant         go to state 54
    array_access     go to state 84


state 98

   69 arithmetic_expr: arithmetic_expr MINUS . arithmetic_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    MINUS            shift, and go to state 43
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    identifier       go to state 82
    arithmetic_expr  go to state 136
    constant         go to state 54
    array_access     go to state 84


state 99

   71 arithmetic_expr: arithmetic_expr DIVISION . arithmetic_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    MINUS            shift, and go to state 43
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    identifier       go to state 82
    arithmetic_expr  go to state 137
    constant         go to state 54
    array_access     go to state 84


state 100

   72 arithmetic_expr: arithmetic_expr MODULO . arithmetic_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    MINUS            shift, and go to state 43
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    identifier       go to state 82
    arithmetic_expr  go to state 138
    constant         go to state 54
    array_access     go to state 84


state 101

   26 declaration: data_type declaration_list ';' .

    $default  reduce using rule 26 (declaration)


state 102

   29 declaration_list: declaration_list COMMA sub_decl .

    $default  reduce using rule 29 (declaration_list)


state 103

   54 assignment_expr: unary_expr assign unary_expr .

    $default  reduce using rule 54 (assignment_expr)


state 104

   55 unary_expr: identifier . INCREMENT
   56           | identifier . DECREMENT

    INCREMENT  shift, and go to state 71
    DECREMENT  shift, and go to state 72


state 105

   53 assignment_expr: lhs assign unary_expr .

    $default  reduce using rule 53 (assignment_expr)


state 106

   55 unary_expr: identifier . INCREMENT
   56           | identifier . DECREMENT
   75 arithmetic_expr: identifier .
   83 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 71
    DECREMENT  shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 75 (arithmetic_expr)


state 107

   51 assignment_expr: lhs assign arithmetic_expr .
   68 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   69                | arithmetic_expr . MINUS arithmetic_expr
   70                | arithmetic_expr . STAR arithmetic_expr
   71                | arithmetic_expr . DIVISION arithmetic_expr
   72                | arithmetic_expr . MODULO arithmetic_expr

    STAR      shift, and go to state 96
    ADDITION  shift, and go to state 97
    MINUS     shift, and go to state 98
    DIVISION  shift, and go to state 99
    MODULO    shift, and go to state 100

    $default  reduce using rule 51 (assignment_expr)


state 108

   52 assignment_expr: lhs assign array_access .
   76 arithmetic_expr: array_access .
   78                | array_access .

    AND               reduce using rule 52 (assignment_expr)
    AND               [reduce using rule 76 (arithmetic_expr)]
    AND               [reduce using rule 78 (arithmetic_expr)]
    OR                reduce using rule 52 (assignment_expr)
    OR                [reduce using rule 76 (arithmetic_expr)]
    OR                [reduce using rule 78 (arithmetic_expr)]
    LESSTHANEQUAL     reduce using rule 52 (assignment_expr)
    LESSTHANEQUAL     [reduce using rule 76 (arithmetic_expr)]
    LESSTHANEQUAL     [reduce using rule 78 (arithmetic_expr)]
    GREATERTHANEQUAL  reduce using rule 52 (assignment_expr)
    GREATERTHANEQUAL  [reduce using rule 76 (arithmetic_expr)]
    GREATERTHANEQUAL  [reduce using rule 78 (arithmetic_expr)]
    EQ                reduce using rule 52 (assignment_expr)
    EQ                [reduce using rule 76 (arithmetic_expr)]
    EQ                [reduce using rule 78 (arithmetic_expr)]
    NEQ               reduce using rule 52 (assignment_expr)
    NEQ               [reduce using rule 76 (arithmetic_expr)]
    NEQ               [reduce using rule 78 (arithmetic_expr)]
    STAR              reduce using rule 76 (arithmetic_expr)
    STAR              [reduce using rule 78 (arithmetic_expr)]
    ADDITION          reduce using rule 76 (arithmetic_expr)
    ADDITION          [reduce using rule 78 (arithmetic_expr)]
    MINUS             reduce using rule 76 (arithmetic_expr)
    MINUS             [reduce using rule 78 (arithmetic_expr)]
    DIVISION          reduce using rule 76 (arithmetic_expr)
    DIVISION          [reduce using rule 78 (arithmetic_expr)]
    MODULO            reduce using rule 76 (arithmetic_expr)
    MODULO            [reduce using rule 78 (arithmetic_expr)]
    LESSTHAN          reduce using rule 52 (assignment_expr)
    LESSTHAN          [reduce using rule 76 (arithmetic_expr)]
    LESSTHAN          [reduce using rule 78 (arithmetic_expr)]
    GREATERTHAN       reduce using rule 52 (assignment_expr)
    GREATERTHAN       [reduce using rule 76 (arithmetic_expr)]
    GREATERTHAN       [reduce using rule 78 (arithmetic_expr)]
    COMMA             reduce using rule 52 (assignment_expr)
    COMMA             [reduce using rule 76 (arithmetic_expr)]
    COMMA             [reduce using rule 78 (arithmetic_expr)]
    ';'               reduce using rule 52 (assignment_expr)
    ';'               [reduce using rule 76 (arithmetic_expr)]
    ';'               [reduce using rule 78 (arithmetic_expr)]
    ')'               reduce using rule 52 (assignment_expr)
    ')'               [reduce using rule 76 (arithmetic_expr)]
    ')'               [reduce using rule 78 (arithmetic_expr)]
    $default          reduce using rule 52 (assignment_expr)


state 109

   87 array_index: unary_expr .

    $default  reduce using rule 87 (array_index)


state 110

   55 unary_expr: identifier . INCREMENT
   56           | identifier . DECREMENT
   75 arithmetic_expr: identifier .
   83 array_access: identifier . '[' array_index ']'
   85 array_index: identifier .

    INCREMENT  shift, and go to state 71
    DECREMENT  shift, and go to state 72
    '['        shift, and go to state 73

    ']'       reduce using rule 75 (arithmetic_expr)
    ']'       [reduce using rule 85 (array_index)]
    $default  reduce using rule 75 (arithmetic_expr)


state 111

   68 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   69                | arithmetic_expr . MINUS arithmetic_expr
   70                | arithmetic_expr . STAR arithmetic_expr
   71                | arithmetic_expr . DIVISION arithmetic_expr
   72                | arithmetic_expr . MODULO arithmetic_expr
   86 array_index: arithmetic_expr .

    STAR      shift, and go to state 96
    ADDITION  shift, and go to state 97
    MINUS     shift, and go to state 98
    DIVISION  shift, and go to state 99
    MODULO    shift, and go to state 100

    $default  reduce using rule 86 (array_index)


state 112

   77 arithmetic_expr: constant .
   84 array_index: constant .

    ']'       reduce using rule 77 (arithmetic_expr)
    ']'       [reduce using rule 84 (array_index)]
    $default  reduce using rule 77 (arithmetic_expr)


state 113

   83 array_access: identifier '[' array_index . ']'

    ']'  shift, and go to state 139


state 114

   37 expression: expression COMMA . sub_expr

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    sub_expr         go to state 140
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 115

   23 if_block: IF '(' expression ')' . stmt
   24         | IF '(' expression ')' . stmt ELSE stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    CHAR        shift, and go to state 10
    BOOLEAN     shift, and go to state 11
    IF          shift, and go to state 12
    FOR         shift, and go to state 13
    WHILE       shift, and go to state 14
    CONTINUE    shift, and go to state 15
    BREAK       shift, and go to state 16
    RETURN      shift, and go to state 17

    stmt              go to state 141
    data_type         go to state 19
    sign_specifier    go to state 20
    type_specifier    go to state 21
    single_stmt       go to state 22
    for_block         go to state 23
    if_block          go to state 24
    while_block       go to state 25
    declaration       go to state 26
    declaration_list  go to state 27
    sub_decl          go to state 28
    assignment_expr   go to state 29
    unary_expr        go to state 30
    lhs               go to state 31
    identifier        go to state 32
    array_access      go to state 33


state 116

   21 for_declaration: data_type declaration_list . ';'
   29 declaration_list: declaration_list . COMMA sub_decl

    COMMA  shift, and go to state 60
    ';'    shift, and go to state 142


state 117

   34 expression_stmt: data_type expression . ';'
   37 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 114
    ';'    shift, and go to state 143


state 118

   31 sub_decl: assignment_expr .
   49 sub_expr: assignment_expr .

    COMMA     reduce using rule 31 (sub_decl)
    COMMA     [reduce using rule 49 (sub_expr)]
    ';'       reduce using rule 31 (sub_decl)
    ';'       [reduce using rule 49 (sub_expr)]
    $default  reduce using rule 49 (sub_expr)


state 119

   32 sub_decl: identifier .
   55 unary_expr: identifier . INCREMENT
   56           | identifier . DECREMENT
   59 lhs: identifier .
   75 arithmetic_expr: identifier .
   83 array_access: identifier . '[' array_index ']'

    INCREMENT  shift, and go to state 71
    DECREMENT  shift, and go to state 72
    '['        shift, and go to state 73

    MULEQ     reduce using rule 59 (lhs)
    DIVEQ     reduce using rule 59 (lhs)
    MODEQ     reduce using rule 59 (lhs)
    PLUSEQ    reduce using rule 59 (lhs)
    MINUSEQ   reduce using rule 59 (lhs)
    ASSIGN    reduce using rule 59 (lhs)
    COMMA     reduce using rule 32 (sub_decl)
    COMMA     [reduce using rule 75 (arithmetic_expr)]
    ';'       reduce using rule 32 (sub_decl)
    ';'       [reduce using rule 75 (arithmetic_expr)]
    $default  reduce using rule 75 (arithmetic_expr)


state 120

   33 sub_decl: array_access .
   60 lhs: array_access .
   76 arithmetic_expr: array_access .
   78                | array_access .

    AND               reduce using rule 76 (arithmetic_expr)
    AND               [reduce using rule 78 (arithmetic_expr)]
    OR                reduce using rule 76 (arithmetic_expr)
    OR                [reduce using rule 78 (arithmetic_expr)]
    LESSTHANEQUAL     reduce using rule 76 (arithmetic_expr)
    LESSTHANEQUAL     [reduce using rule 78 (arithmetic_expr)]
    GREATERTHANEQUAL  reduce using rule 76 (arithmetic_expr)
    GREATERTHANEQUAL  [reduce using rule 78 (arithmetic_expr)]
    EQ                reduce using rule 76 (arithmetic_expr)
    EQ                [reduce using rule 78 (arithmetic_expr)]
    NEQ               reduce using rule 76 (arithmetic_expr)
    NEQ               [reduce using rule 78 (arithmetic_expr)]
    MULEQ             reduce using rule 60 (lhs)
    DIVEQ             reduce using rule 60 (lhs)
    MODEQ             reduce using rule 60 (lhs)
    PLUSEQ            reduce using rule 60 (lhs)
    MINUSEQ           reduce using rule 60 (lhs)
    STAR              reduce using rule 76 (arithmetic_expr)
    STAR              [reduce using rule 78 (arithmetic_expr)]
    ADDITION          reduce using rule 76 (arithmetic_expr)
    ADDITION          [reduce using rule 78 (arithmetic_expr)]
    MINUS             reduce using rule 76 (arithmetic_expr)
    MINUS             [reduce using rule 78 (arithmetic_expr)]
    DIVISION          reduce using rule 76 (arithmetic_expr)
    DIVISION          [reduce using rule 78 (arithmetic_expr)]
    MODULO            reduce using rule 76 (arithmetic_expr)
    MODULO            [reduce using rule 78 (arithmetic_expr)]
    LESSTHAN          reduce using rule 76 (arithmetic_expr)
    LESSTHAN          [reduce using rule 78 (arithmetic_expr)]
    GREATERTHAN       reduce using rule 76 (arithmetic_expr)
    GREATERTHAN       [reduce using rule 78 (arithmetic_expr)]
    ASSIGN            reduce using rule 60 (lhs)
    COMMA             reduce using rule 33 (sub_decl)
    COMMA             [reduce using rule 76 (arithmetic_expr)]
    COMMA             [reduce using rule 78 (arithmetic_expr)]
    ';'               reduce using rule 33 (sub_decl)
    ';'               [reduce using rule 76 (arithmetic_expr)]
    ';'               [reduce using rule 78 (arithmetic_expr)]
    $default          reduce using rule 76 (arithmetic_expr)


state 121

   34 expression_stmt: data_type . expression ';'

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    expression       go to state 117
    sub_expr         go to state 75
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 122

   20 for_block: FOR '(' for_declaration expression_stmt . expression ')' stmt

    IDENTIFIER       shift, and go to state 1
    INTEGER_LITERAL  shift, and go to state 41
    CHAR_LITERAL     shift, and go to state 42
    INCREMENT        shift, and go to state 2
    DECREMENT        shift, and go to state 3
    MINUS            shift, and go to state 43
    EXCLAIMATION     shift, and go to state 44
    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    '('              shift, and go to state 48

    expression       go to state 144
    sub_expr         go to state 75
    assignment_expr  go to state 50
    unary_expr       go to state 51
    lhs              go to state 31
    identifier       go to state 52
    arithmetic_expr  go to state 53
    constant         go to state 54
    array_access     go to state 55


state 123

   35 expression_stmt: expression ';' .

    $default  reduce using rule 35 (expression_stmt)


state 124

   25 while_block: WHILE '(' expression ')' . stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    CHAR        shift, and go to state 10
    BOOLEAN     shift, and go to state 11
    IF          shift, and go to state 12
    FOR         shift, and go to state 13
    WHILE       shift, and go to state 14
    CONTINUE    shift, and go to state 15
    BREAK       shift, and go to state 16
    RETURN      shift, and go to state 17

    stmt              go to state 145
    data_type         go to state 19
    sign_specifier    go to state 20
    type_specifier    go to state 21
    single_stmt       go to state 22
    for_block         go to state 23
    if_block          go to state 24
    while_block       go to state 25
    declaration       go to state 26
    declaration_list  go to state 27
    sub_decl          go to state 28
    assignment_expr   go to state 29
    unary_expr        go to state 30
    lhs               go to state 31
    identifier        go to state 32
    array_access      go to state 33


state 125

   73 arithmetic_expr: '(' arithmetic_expr ')' .

    $default  reduce using rule 73 (arithmetic_expr)


state 126

   39 sub_expr: sub_expr . GREATERTHAN sub_expr
   40         | sub_expr . LESSTHAN sub_expr
   41         | sub_expr . EQ sub_expr
   42         | sub_expr . NEQ sub_expr
   43         | sub_expr . GREATERTHANEQUAL sub_expr
   44         | sub_expr . LESSTHANEQUAL sub_expr
   45         | sub_expr . AND sub_expr
   45         | sub_expr AND sub_expr .
   46         | sub_expr . OR sub_expr

    LESSTHANEQUAL     shift, and go to state 89
    GREATERTHANEQUAL  shift, and go to state 90
    EQ                shift, and go to state 91
    NEQ               shift, and go to state 92
    LESSTHAN          shift, and go to state 93
    GREATERTHAN       shift, and go to state 94

    $default  reduce using rule 45 (sub_expr)


state 127

   39 sub_expr: sub_expr . GREATERTHAN sub_expr
   40         | sub_expr . LESSTHAN sub_expr
   41         | sub_expr . EQ sub_expr
   42         | sub_expr . NEQ sub_expr
   43         | sub_expr . GREATERTHANEQUAL sub_expr
   44         | sub_expr . LESSTHANEQUAL sub_expr
   45         | sub_expr . AND sub_expr
   46         | sub_expr . OR sub_expr
   46         | sub_expr OR sub_expr .

    AND               shift, and go to state 87
    LESSTHANEQUAL     shift, and go to state 89
    GREATERTHANEQUAL  shift, and go to state 90
    EQ                shift, and go to state 91
    NEQ               shift, and go to state 92
    LESSTHAN          shift, and go to state 93
    GREATERTHAN       shift, and go to state 94

    $default  reduce using rule 46 (sub_expr)


state 128

   39 sub_expr: sub_expr . GREATERTHAN sub_expr
   40         | sub_expr . LESSTHAN sub_expr
   41         | sub_expr . EQ sub_expr
   42         | sub_expr . NEQ sub_expr
   43         | sub_expr . GREATERTHANEQUAL sub_expr
   44         | sub_expr . LESSTHANEQUAL sub_expr
   44         | sub_expr LESSTHANEQUAL sub_expr .
   45         | sub_expr . AND sub_expr
   46         | sub_expr . OR sub_expr

    $default  reduce using rule 44 (sub_expr)


state 129

   39 sub_expr: sub_expr . GREATERTHAN sub_expr
   40         | sub_expr . LESSTHAN sub_expr
   41         | sub_expr . EQ sub_expr
   42         | sub_expr . NEQ sub_expr
   43         | sub_expr . GREATERTHANEQUAL sub_expr
   43         | sub_expr GREATERTHANEQUAL sub_expr .
   44         | sub_expr . LESSTHANEQUAL sub_expr
   45         | sub_expr . AND sub_expr
   46         | sub_expr . OR sub_expr

    $default  reduce using rule 43 (sub_expr)


state 130

   39 sub_expr: sub_expr . GREATERTHAN sub_expr
   40         | sub_expr . LESSTHAN sub_expr
   41         | sub_expr . EQ sub_expr
   41         | sub_expr EQ sub_expr .
   42         | sub_expr . NEQ sub_expr
   43         | sub_expr . GREATERTHANEQUAL sub_expr
   44         | sub_expr . LESSTHANEQUAL sub_expr
   45         | sub_expr . AND sub_expr
   46         | sub_expr . OR sub_expr

    LESSTHANEQUAL     shift, and go to state 89
    GREATERTHANEQUAL  shift, and go to state 90
    LESSTHAN          shift, and go to state 93
    GREATERTHAN       shift, and go to state 94

    $default  reduce using rule 41 (sub_expr)


state 131

   39 sub_expr: sub_expr . GREATERTHAN sub_expr
   40         | sub_expr . LESSTHAN sub_expr
   41         | sub_expr . EQ sub_expr
   42         | sub_expr . NEQ sub_expr
   42         | sub_expr NEQ sub_expr .
   43         | sub_expr . GREATERTHANEQUAL sub_expr
   44         | sub_expr . LESSTHANEQUAL sub_expr
   45         | sub_expr . AND sub_expr
   46         | sub_expr . OR sub_expr

    LESSTHANEQUAL     shift, and go to state 89
    GREATERTHANEQUAL  shift, and go to state 90
    LESSTHAN          shift, and go to state 93
    GREATERTHAN       shift, and go to state 94

    $default  reduce using rule 42 (sub_expr)


state 132

   39 sub_expr: sub_expr . GREATERTHAN sub_expr
   40         | sub_expr . LESSTHAN sub_expr
   40         | sub_expr LESSTHAN sub_expr .
   41         | sub_expr . EQ sub_expr
   42         | sub_expr . NEQ sub_expr
   43         | sub_expr . GREATERTHANEQUAL sub_expr
   44         | sub_expr . LESSTHANEQUAL sub_expr
   45         | sub_expr . AND sub_expr
   46         | sub_expr . OR sub_expr

    $default  reduce using rule 40 (sub_expr)


state 133

   39 sub_expr: sub_expr . GREATERTHAN sub_expr
   39         | sub_expr GREATERTHAN sub_expr .
   40         | sub_expr . LESSTHAN sub_expr
   41         | sub_expr . EQ sub_expr
   42         | sub_expr . NEQ sub_expr
   43         | sub_expr . GREATERTHANEQUAL sub_expr
   44         | sub_expr . LESSTHANEQUAL sub_expr
   45         | sub_expr . AND sub_expr
   46         | sub_expr . OR sub_expr

    $default  reduce using rule 39 (sub_expr)


state 134

   68 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   69                | arithmetic_expr . MINUS arithmetic_expr
   70                | arithmetic_expr . STAR arithmetic_expr
   70                | arithmetic_expr STAR arithmetic_expr .
   71                | arithmetic_expr . DIVISION arithmetic_expr
   72                | arithmetic_expr . MODULO arithmetic_expr

    $default  reduce using rule 70 (arithmetic_expr)


state 135

   68 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   68                | arithmetic_expr ADDITION arithmetic_expr .
   69                | arithmetic_expr . MINUS arithmetic_expr
   70                | arithmetic_expr . STAR arithmetic_expr
   71                | arithmetic_expr . DIVISION arithmetic_expr
   72                | arithmetic_expr . MODULO arithmetic_expr

    STAR      shift, and go to state 96
    DIVISION  shift, and go to state 99
    MODULO    shift, and go to state 100

    $default  reduce using rule 68 (arithmetic_expr)


state 136

   68 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   69                | arithmetic_expr . MINUS arithmetic_expr
   69                | arithmetic_expr MINUS arithmetic_expr .
   70                | arithmetic_expr . STAR arithmetic_expr
   71                | arithmetic_expr . DIVISION arithmetic_expr
   72                | arithmetic_expr . MODULO arithmetic_expr

    STAR      shift, and go to state 96
    DIVISION  shift, and go to state 99
    MODULO    shift, and go to state 100

    $default  reduce using rule 69 (arithmetic_expr)


state 137

   68 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   69                | arithmetic_expr . MINUS arithmetic_expr
   70                | arithmetic_expr . STAR arithmetic_expr
   71                | arithmetic_expr . DIVISION arithmetic_expr
   71                | arithmetic_expr DIVISION arithmetic_expr .
   72                | arithmetic_expr . MODULO arithmetic_expr

    $default  reduce using rule 71 (arithmetic_expr)


state 138

   68 arithmetic_expr: arithmetic_expr . ADDITION arithmetic_expr
   69                | arithmetic_expr . MINUS arithmetic_expr
   70                | arithmetic_expr . STAR arithmetic_expr
   71                | arithmetic_expr . DIVISION arithmetic_expr
   72                | arithmetic_expr . MODULO arithmetic_expr
   72                | arithmetic_expr MODULO arithmetic_expr .

    $default  reduce using rule 72 (arithmetic_expr)


state 139

   83 array_access: identifier '[' array_index ']' .

    $default  reduce using rule 83 (array_access)


state 140

   37 expression: expression COMMA sub_expr .
   39 sub_expr: sub_expr . GREATERTHAN sub_expr
   40         | sub_expr . LESSTHAN sub_expr
   41         | sub_expr . EQ sub_expr
   42         | sub_expr . NEQ sub_expr
   43         | sub_expr . GREATERTHANEQUAL sub_expr
   44         | sub_expr . LESSTHANEQUAL sub_expr
   45         | sub_expr . AND sub_expr
   46         | sub_expr . OR sub_expr

    AND               shift, and go to state 87
    OR                shift, and go to state 88
    LESSTHANEQUAL     shift, and go to state 89
    GREATERTHANEQUAL  shift, and go to state 90
    EQ                shift, and go to state 91
    NEQ               shift, and go to state 92
    LESSTHAN          shift, and go to state 93
    GREATERTHAN       shift, and go to state 94

    $default  reduce using rule 37 (expression)


state 141

   23 if_block: IF '(' expression ')' stmt .
   24         | IF '(' expression ')' stmt . ELSE stmt

    ELSE  shift, and go to state 146

    $default  reduce using rule 23 (if_block)


state 142

   21 for_declaration: data_type declaration_list ';' .

    $default  reduce using rule 21 (for_declaration)


state 143

   34 expression_stmt: data_type expression ';' .

    $default  reduce using rule 34 (expression_stmt)


state 144

   20 for_block: FOR '(' for_declaration expression_stmt expression . ')' stmt
   37 expression: expression . COMMA sub_expr

    COMMA  shift, and go to state 114
    ')'    shift, and go to state 147


state 145

   25 while_block: WHILE '(' expression ')' stmt .

    $default  reduce using rule 25 (while_block)


state 146

   24 if_block: IF '(' expression ')' stmt ELSE . stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    CHAR        shift, and go to state 10
    BOOLEAN     shift, and go to state 11
    IF          shift, and go to state 12
    FOR         shift, and go to state 13
    WHILE       shift, and go to state 14
    CONTINUE    shift, and go to state 15
    BREAK       shift, and go to state 16
    RETURN      shift, and go to state 17

    stmt              go to state 148
    data_type         go to state 19
    sign_specifier    go to state 20
    type_specifier    go to state 21
    single_stmt       go to state 22
    for_block         go to state 23
    if_block          go to state 24
    while_block       go to state 25
    declaration       go to state 26
    declaration_list  go to state 27
    sub_decl          go to state 28
    assignment_expr   go to state 29
    unary_expr        go to state 30
    lhs               go to state 31
    identifier        go to state 32
    array_access      go to state 33


state 147

   20 for_block: FOR '(' for_declaration expression_stmt expression ')' . stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    CHAR        shift, and go to state 10
    BOOLEAN     shift, and go to state 11
    IF          shift, and go to state 12
    FOR         shift, and go to state 13
    WHILE       shift, and go to state 14
    CONTINUE    shift, and go to state 15
    BREAK       shift, and go to state 16
    RETURN      shift, and go to state 17

    stmt              go to state 149
    data_type         go to state 19
    sign_specifier    go to state 20
    type_specifier    go to state 21
    single_stmt       go to state 22
    for_block         go to state 23
    if_block          go to state 24
    while_block       go to state 25
    declaration       go to state 26
    declaration_list  go to state 27
    sub_decl          go to state 28
    assignment_expr   go to state 29
    unary_expr        go to state 30
    lhs               go to state 31
    identifier        go to state 32
    array_access      go to state 33


state 148

   24 if_block: IF '(' expression ')' stmt ELSE stmt .

    $default  reduce using rule 24 (if_block)


state 149

   20 for_block: FOR '(' for_declaration expression_stmt expression ')' stmt .

    $default  reduce using rule 20 (for_block)
